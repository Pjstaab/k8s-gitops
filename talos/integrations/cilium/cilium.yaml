# This manifest was generated by automation. DO NOT EDIT.
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: cilium
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: cilium-operator
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: hubble-relay
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: hubble-ui
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: cilium
  name: cilium-config-agent
  namespace: kube-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: cilium
  name: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints/status
  - ciliumendpoints
  verbs:
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: cilium
  name: cilium-operator
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  - create
  - update
  - deletecollection
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: cilium
  name: hubble-ui
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: cilium
  name: cilium-config-agent
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
- kind: ServiceAccount
  name: cilium
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: cilium
  name: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: cilium
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: cilium
  name: cilium-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: cilium-operator
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: cilium
  name: hubble-ui
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: hubble-ui
  namespace: kube-system
---
apiVersion: v1
data:
  agent-not-ready-taint-key: node.cilium.io/agent-not-ready
  arping-refresh-period: 30s
  auto-direct-node-routes: "true"
  bpf-lb-algorithm: maglev
  bpf-lb-external-clusterip: "false"
  bpf-lb-map-max: "65536"
  bpf-lb-mode: hybrid
  bpf-lb-sock: "false"
  bpf-map-dynamic-size-ratio: "0.0025"
  bpf-policy-map-max: "16384"
  bpf-root: /sys/fs/bpf
  cgroup-root: /sys/fs/cgroup
  cilium-endpoint-gc-interval: 5m0s
  cluster-id: "1"
  cluster-name: talos-default
  cni-uninstall: "true"
  custom-cni-conf: "false"
  debug: "false"
  disable-cnp-status-updates: "true"
  disable-endpoint-crd: "false"
  enable-auto-protect-node-port-range: "true"
  enable-bgp-control-plane: "false"
  enable-bpf-clock-probe: "true"
  enable-endpoint-health-checking: "true"
  enable-endpoint-routes: "true"
  enable-health-check-nodeport: "true"
  enable-health-checking: "true"
  enable-hubble: "true"
  enable-hubble-open-metrics: "true"
  enable-ipv4: "true"
  enable-ipv4-masquerade: "true"
  enable-ipv6: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-k8s-terminating-endpoint: "true"
  enable-l2-neigh-discovery: "true"
  enable-l7-proxy: "true"
  enable-local-redirect-policy: "false"
  enable-metrics: "true"
  enable-policy: default
  enable-remote-node-identity: "true"
  enable-sctp: "false"
  enable-svc-source-range-check: "true"
  enable-vtep: "false"
  enable-well-known-identities: "false"
  enable-xt-socket-fallback: "true"
  hubble-disable-tls: "false"
  hubble-listen-address: :4244
  hubble-metrics: dns:query;ignoreAAAA, drop tcp flow port-distribution http icmp
    httpV2:exemplars=true;labelsContext=source_ip\,source_namespace\,source_workload\,destination_ip\,destination_namespace\,destination_workload\,traffic_direction
    policy:sourceContext=app|workload-name|pod|reserved-identity;destinationContext=app|workload-name|pod|dns|reserved-identity;labelsContext=source_namespace,destination_namespace
    httpV2:sourceContext=workload-name|pod-name|reserved-identity;destinationContext=workload-name|pod-name|reserved-identity;labelsContext=source_namespace,destination_namespace,traffic_direction
    kafka:sourceContext=workload-name|pod-name|reserved-identity;destinationContext=workload-name|pod-name|reserved-identity;labelsContext=source_namespace,destination_namespace,traffic_direction
  hubble-metrics-server: :9965
  hubble-socket-path: /var/run/cilium/hubble.sock
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  identity-allocation-mode: crd
  identity-gc-interval: 15m0s
  identity-heartbeat-timeout: 30m0s
  install-no-conntrack-iptables-rules: "false"
  ipam: kubernetes
  ipv4-native-routing-cidr: 10.0.0.0/8
  kube-proxy-replacement: strict
  kube-proxy-replacement-healthz-bind-address: 0.0.0.0:10256
  monitor-aggregation: medium
  monitor-aggregation-flags: all
  monitor-aggregation-interval: 5s
  node-port-bind-protection: "true"
  nodes-gc-interval: 5m0s
  operator-api-serve-addr: 127.0.0.1:9234
  operator-prometheus-serve-addr: :9963
  preallocate-bpf-maps: "false"
  procfs: /host/proc
  prometheus-serve-addr: :9962
  proxy-prometheus-port: "9964"
  remove-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  sidecar-istio-proxy-image: cilium/istio_proxy
  skip-cnp-status-startup-clean: "false"
  synchronize-k8s-nodes: "true"
  tofqdns-dns-reject-response-code: refused
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: 0s
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-min-ttl: "3600"
  tofqdns-proxy-response-max-delay: 100ms
  tunnel: disabled
  unmanaged-pod-watcher-interval: "15"
  vtep-cidr: ""
  vtep-endpoint: ""
  vtep-mac: ""
  vtep-mask: ""
kind: ConfigMap
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: cilium-config
  namespace: kube-system
---
apiVersion: v1
data:
  hubble-l7-http-metrics-by-workload.json: |
    {
      "__inputs": [],
      "__elements": {},
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "9.0.5"
        },
        {
          "type": "datasource",
          "id": "prometheus",
          "name": "Prometheus",
          "version": "1.0.0"
        },
        {
          "type": "panel",
          "id": "stat",
          "name": "Stat",
          "version": ""
        },
        {
          "type": "panel",
          "id": "timeseries",
          "name": "Time series",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": {
              "type": "grafana",
              "uid": "-- Grafana --"
            },
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "target": {
              "limit": 100,
              "matchAny": false,
              "tags": [],
              "type": "dashboard"
            },
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "fiscalYearStartMonth": 0,
      "graphTooltip": 1,
      "id": null,
      "links": [],
      "liveNow": false,
      "panels": [
        {
          "collapsed": false,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 14,
          "panels": [],
          "title": "General",
          "type": "row"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "reqps"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 5,
            "w": 8,
            "x": 0,
            "y": 1
          },
          "id": 16,
          "options": {
            "colorMode": "value",
            "graphMode": "area",
            "justifyMode": "auto",
            "orientation": "auto",
            "reduceOptions": {
              "calcs": [
                "lastNotNull"
              ],
              "fields": "",
              "values": false
            },
            "textMode": "auto"
          },
          "pluginVersion": "9.0.5",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "expr": "round(sum(rate(hubble_http_requests_total{reporter=~\"${reporter}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\"}[$__rate_interval])), 0.001)",
              "refId": "A"
            }
          ],
          "title": "Incoming Request Volume",
          "type": "stat"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "percentunit"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 5,
            "w": 8,
            "x": 8,
            "y": 1
          },
          "id": 17,
          "options": {
            "colorMode": "value",
            "graphMode": "area",
            "justifyMode": "auto",
            "orientation": "auto",
            "reduceOptions": {
              "calcs": [
                "lastNotNull"
              ],
              "fields": "",
              "values": false
            },
            "textMode": "auto"
          },
          "pluginVersion": "9.0.5",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": false,
              "expr": "sum(rate(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", status!~\"5.*\"}[$__rate_interval]))\n/\nsum(rate(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\"}[$__rate_interval]))",
              "interval": "",
              "legendFormat": "{{ cluster }} {{ method }} {{ source_namespace }}/{{ source_workload }}",
              "range": true,
              "refId": "A"
            }
          ],
          "title": "Incoming Request Success Rate (non-5xx responses)",
          "type": "stat"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "s"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 5,
            "w": 8,
            "x": 16,
            "y": 1
          },
          "id": 18,
          "options": {
            "legend": {
              "calcs": [
                "lastNotNull"
              ],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "pluginVersion": "9.0.5",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": false,
              "expr": "histogram_quantile(0.50, sum(rate(hubble_http_request_duration_seconds_bucket{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\"}[$__rate_interval])) by (le))",
              "interval": "",
              "legendFormat": "P50",
              "range": true,
              "refId": "A"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": false,
              "expr": "histogram_quantile(0.95, sum(rate(hubble_http_request_duration_seconds_bucket{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\"}[$__rate_interval])) by (le))",
              "hide": false,
              "interval": "",
              "legendFormat": "P95",
              "range": true,
              "refId": "B"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": false,
              "expr": "histogram_quantile(0.99, sum(rate(hubble_http_request_duration_seconds_bucket{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\"}[$__rate_interval])) by (le))",
              "hide": false,
              "interval": "",
              "legendFormat": "P99",
              "range": true,
              "refId": "C"
            }
          ],
          "title": "Request Duration",
          "type": "timeseries"
        },
        {
          "collapsed": false,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 6
          },
          "id": 6,
          "panels": [],
          "title": "Requests by Source",
          "type": "row"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "reqps"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 7
          },
          "id": 3,
          "options": {
            "legend": {
              "calcs": [
                "max",
                "mean",
                "sum",
                "lastNotNull"
              ],
              "displayMode": "table",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": false,
              "expr": "round(sum(rate(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\"}[$__rate_interval])) by (cluster, source_namespace, source_workload, status), 0.001)",
              "interval": "",
              "legendFormat": "{{ cluster }} {{ method }} {{ source_namespace }}/{{ source_workload }}: {{ status }}",
              "range": true,
              "refId": "A"
            }
          ],
          "title": "Incoming Requests by Source and Response Code",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "percentunit"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 7
          },
          "id": 7,
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "min",
                "max",
                "lastNotNull"
              ],
              "displayMode": "table",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": false,
              "expr": "sum(rate(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\",status!~\"5.*\"}[$__rate_interval])) by (cluster, source_namespace, source_workload)\n/\nsum(rate(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\"}[$__rate_interval])) by (cluster, source_namespace, source_workload)",
              "interval": "",
              "legendFormat": "{{ cluster }} {{ method }} {{ source_namespace }}/{{ source_workload }}",
              "range": true,
              "refId": "A"
            }
          ],
          "title": "Incoming Request Success Rate (non-5xx responses) By Source",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "s"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 17
          },
          "id": 4,
          "options": {
            "legend": {
              "calcs": [
                "min",
                "max",
                "mean",
                "lastNotNull"
              ],
              "displayMode": "table",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": true,
              "expr": "histogram_quantile(0.50, sum(rate(hubble_http_request_duration_seconds_bucket{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\"}[$__rate_interval])) by (cluster, source_namespace, source_workload, le))",
              "interval": "",
              "legendFormat": "{{ cluster }} {{ source_namespace }}/{{ source_workload }} P50",
              "range": true,
              "refId": "A"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": true,
              "expr": "histogram_quantile(0.95, sum(rate(hubble_http_request_duration_seconds_bucket{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\"}[$__rate_interval])) by (cluster, source_namespace, source_workload, le))",
              "hide": false,
              "interval": "",
              "legendFormat": "{{ cluster }} {{ source_namespace }}/{{ source_workload }} P95",
              "range": true,
              "refId": "B"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": true,
              "expr": "histogram_quantile(0.99, sum(rate(hubble_http_request_duration_seconds_bucket{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\"}[$__rate_interval])) by (cluster, source_namespace, source_workload, le))",
              "hide": false,
              "interval": "",
              "legendFormat": "{{ cluster }} {{ source_namespace }}/{{ source_workload }} P99",
              "range": true,
              "refId": "C"
            }
          ],
          "title": "HTTP Request Duration by Source",
          "type": "timeseries"
        },
        {
          "collapsed": false,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 27
          },
          "id": 9,
          "panels": [],
          "title": "Requests by Destination",
          "type": "row"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "reqps"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 28
          },
          "id": 10,
          "options": {
            "legend": {
              "calcs": [
                "max",
                "mean",
                "sum",
                "lastNotNull"
              ],
              "displayMode": "table",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": false,
              "expr": "round(sum(rate(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\"}[$__rate_interval])) by (cluster, destination_namespace, destination_workload, status), 0.001)",
              "interval": "",
              "legendFormat": "{{ cluster }} {{ method }} {{ destination_namespace }}/{{ destination_workload }}: {{ status }}",
              "range": true,
              "refId": "A"
            }
          ],
          "title": "Incoming Requests by Destination and Response Code",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "percentunit"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 28
          },
          "id": 11,
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "min",
                "max",
                "lastNotNull"
              ],
              "displayMode": "table",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": false,
              "expr": "sum(rate(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\",status!~\"5.*\"}[$__rate_interval])) by (cluster, destination_namespace, destination_workload)\n/\nsum(rate(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\"}[$__rate_interval])) by (cluster, destination_namespace, destination_workload)",
              "interval": "",
              "legendFormat": "{{ cluster }} {{ method }} {{ destination_namespace }}/{{ destination_workload }}",
              "range": true,
              "refId": "A"
            }
          ],
          "title": "Incoming Request Success Rate (non-5xx responses) By Destination",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "s"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 38
          },
          "id": 12,
          "options": {
            "legend": {
              "calcs": [
                "min",
                "max",
                "mean",
                "lastNotNull"
              ],
              "displayMode": "table",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": true,
              "expr": "histogram_quantile(0.50, sum(rate(hubble_http_request_duration_seconds_bucket{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\"}[$__rate_interval])) by (cluster, destination_namespace, destination_workload, le))",
              "interval": "",
              "legendFormat": "{{ cluster }} {{ destination_namespace }}/{{ destination_workload }} P50",
              "range": true,
              "refId": "A"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": true,
              "expr": "histogram_quantile(0.95, sum(rate(hubble_http_request_duration_seconds_bucket{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\"}[$__rate_interval])) by (cluster, destination_namespace, destination_workload, le))",
              "hide": false,
              "interval": "",
              "legendFormat": "{{ cluster }} {{ destination_namespace }}/{{ destination_workload }} P95",
              "range": true,
              "refId": "B"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": true,
              "expr": "histogram_quantile(0.99, sum(rate(hubble_http_request_duration_seconds_bucket{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\"}[$__rate_interval])) by (cluster, destination_namespace, destination_workload, le))",
              "hide": false,
              "interval": "",
              "legendFormat": "{{ cluster }} {{ destination_namespace }}/{{ destination_workload }} P99",
              "range": true,
              "refId": "C"
            }
          ],
          "title": "HTTP Request Duration by Destination",
          "type": "timeseries"
        }
      ],
      "refresh": "30s",
      "schemaVersion": 36,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": [
          {
            "current": {},
            "hide": 0,
            "includeAll": false,
            "label": "Prometheus",
            "multi": false,
            "name": "DS_PROMETHEUS",
            "options": [],
            "query": "prometheus",
            "queryValue": "",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "type": "datasource"
          },
          {
            "current": {},
            "datasource": {
              "type": "prometheus",
              "uid": "${DS_PROMETHEUS}"
            },
            "definition": "label_values(hubble_http_requests_total, cluster)",
            "hide": 0,
            "includeAll": false,
            "label": "Cluster",
            "multi": false,
            "name": "cluster",
            "options": [],
            "query": {
              "query": "label_values(hubble_http_requests_total, cluster)",
              "refId": "StandardVariableQuery"
            },
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 2,
            "type": "query"
          },
          {
            "current": {},
            "datasource": {
              "type": "prometheus",
              "uid": "${DS_PROMETHEUS}"
            },
            "definition": "label_values(hubble_http_requests_total{cluster=~\"${cluster}\"}, destination_namespace)",
            "description": "",
            "hide": 0,
            "includeAll": false,
            "label": "Destination Namespace",
            "multi": false,
            "name": "destination_namespace",
            "options": [],
            "query": {
              "query": "label_values(hubble_http_requests_total{cluster=~\"${cluster}\"}, destination_namespace)",
              "refId": "StandardVariableQuery"
            },
            "refresh": 2,
            "regex": "",
            "skipUrlSync": false,
            "sort": 2,
            "type": "query"
          },
          {
            "current": {},
            "datasource": {
              "type": "prometheus",
              "uid": "${DS_PROMETHEUS}"
            },
            "definition": "label_values(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\"}, destination_workload)",
            "hide": 0,
            "includeAll": false,
            "label": "Destination Workload",
            "multi": false,
            "name": "destination_workload",
            "options": [],
            "query": {
              "query": "label_values(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\"}, destination_workload)",
              "refId": "StandardVariableQuery"
            },
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 2,
            "type": "query"
          },
          {
            "current": {},
            "datasource": {
              "type": "prometheus",
              "uid": "${DS_PROMETHEUS}"
            },
            "definition": "label_values(hubble_http_requests_total, reporter)",
            "hide": 0,
            "includeAll": false,
            "label": "Reporter",
            "multi": false,
            "name": "reporter",
            "options": [],
            "query": {
              "query": "label_values(hubble_http_requests_total, reporter)",
              "refId": "StandardVariableQuery"
            },
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "type": "query"
          },
          {
            "current": {},
            "datasource": {
              "type": "prometheus",
              "uid": "${DS_PROMETHEUS}"
            },
            "definition": "label_values(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\"}, source_namespace)",
            "hide": 0,
            "includeAll": true,
            "label": "Source Namespace",
            "multi": true,
            "name": "source_namespace",
            "options": [],
            "query": {
              "query": "label_values(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\"}, source_namespace)",
              "refId": "StandardVariableQuery"
            },
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "type": "query"
          },
          {
            "current": {},
            "datasource": {
              "type": "prometheus",
              "uid": "${DS_PROMETHEUS}"
            },
            "definition": "label_values(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", source_namespace=~\"${source_namespace}\"}, source_workload)",
            "hide": 0,
            "includeAll": true,
            "label": "Source Workload",
            "multi": true,
            "name": "source_workload",
            "options": [],
            "query": {
              "query": "label_values(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", source_namespace=~\"${source_namespace}\"}, source_workload)",
              "refId": "StandardVariableQuery"
            },
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "type": "query"
          }
        ]
      },
      "time": {
        "from": "now-6h",
        "to": "now"
      },
      "timepicker": {},
      "timezone": "",
      "title": "Hubble L7 HTTP Metrics by Workload",
      "uid": "3g264CZVz",
      "version": 2,
      "weekStart": ""
    }
kind: ConfigMap
metadata:
  annotations:
    grafana_folder: Cilium
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: hubble
    app.kubernetes.io/part-of: cilium
    grafana_dashboard: "1"
    k8s-app: hubble
  name: hubble-l7-http-metrics-by-workload
  namespace: kube-system
---
apiVersion: v1
data:
  config.yaml: "cluster-name: talos-default\npeer-service: \"hubble-peer.kube-system.svc.cluster.local:443\"\nlisten-address:
    :4245\nmetrics-listen-address: \":9966\"\ndial-timeout: \nretry-timeout: \nsort-buffer-len-max:
    \nsort-buffer-drain-timeout: \ntls-client-cert-file: /var/lib/hubble-relay/tls/client.crt\ntls-client-key-file:
    /var/lib/hubble-relay/tls/client.key\ntls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt\ndisable-server-tls:
    true\n"
kind: ConfigMap
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: hubble-relay-config
  namespace: kube-system
---
apiVersion: v1
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name
    \ localhost;\n    root /app;\n    index index.html;\n    client_max_body_size
    1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header
    X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods
    \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin
    *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers
    content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers
    range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n
    \       if ($request_method = OPTIONS) {\n            return 204;\n        }\n
    \       # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n
    \           proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n
    \           proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n
    \           # double `/index.html` is required here \n            try_files $uri
    $uri/ /index.html /index.html;\n        }\n    }\n}"
kind: ConfigMap
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: hubble-ui-nginx
  namespace: kube-system
---
apiVersion: v1
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRZVdFNlBiS0dObVg2SGxLWDBsN2RzekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak13TkRJd01UUXdNelF4V2hjTk1qWXdOREU1TVRRdwpNelF4V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRGcyZEt5eCtVcXFEdmdGdzlQMFRJRXdPNUhDZWVUUTN6MDFyOXJjNjEzeUgvdVpsZ0sKdm9MVkNvZi9aenhpZzJ6R0RjY0hPaXBzNE5KUkFjSzg5d0p2amsySVRwVTJwM3ZYWVpUWFZ4US9pWkhSNFhPOApMSU5nWlB3Yis3MjhONUk2bnI5NjYveUdITWRkeGgvTmp6ck16Wit6bHZBTHZBS0RqRE5nbE8xUGJHSWswSVRSCjAzWnhOWFpiWmVWYUhmWXFOdjZnbWMxRHpsejBqSnUyTVRWZGJrWmZ5RkVNVmppd2lvdlZLSmtaL3JiUHNoaysKdnlzSE4zMVBWTHltTXF2U3BXcFJVbWRVY0swS3BwYmxoVGxpYXZxaTQzSnFiMDJJNlFia3VPYjBPOHBSS21vMAo1ZUZIc2UrcmlKcW9LaE5QNXJvaEVBWWx0VHZ6amx5SC9yTWZBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVUyWnFZZElCZEtCb2lTQmJudEVMRUdLYkhFdzh3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFBUURnamNKYUpLL2FUbHRsSnI2WGhhMGNRcHM1SlhQMmEwa2J0YVdUbjJlV1duYStOR1BDNjZoCkJ6Yk5rcHpCZEJPc0c0ZWxPelZ3c2xobk9YS29FMXAwTzR4RXZYeElMZkpFMjNJWmVlVCtrN3RXT2ZpYzRTS3AKeUZhUmNPSjd3eDZITXpkWUZCYWN4ajBXR3ZBUUZ4WmlwNngrSVRMcDNFS1Q1eFR1UjRQa05SM3RzL29WQ2NkSAo5TnAxYm1sL2N0bFlTRFZpemNIK1YxcW5TQzJnZnBrK1FmbVFabzVSVTNMV0VmcEJGdy9PU0FJbkk2ZFVkS3RGCm1BeHZJWkF2cCtkU1FUVVpoWXhJZVFqaExEYXVqSXlDaFJVN1FDVWU2M2NpTk9nQVRWellsTEVmT01QVFByUnUKalJ6WGMyUnpCV0lhSUhQMDR5cWNJM2hGdy9hVDF5ST0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBNE5uU3NzZmxLcWc3NEJjUFQ5RXlCTUR1UndubmswTjg5TmEvYTNPdGQ4aC83bVpZCkNyNkMxUXFILzJjOFlvTnN4ZzNIQnpvcWJPRFNVUUhDdlBjQ2I0NU5pRTZWTnFkNzEyR1UxMWNVUDRtUjBlRnoKdkN5RFlHVDhHL3U5dkRlU09wNi9ldXY4aGh6SFhjWWZ6WTg2ek0yZnM1YndDN3dDZzR3ellKVHRUMnhpSk5DRQowZE4yY1RWMlcyWGxXaDMyS2piK29Kbk5RODVjOUl5YnRqRTFYVzVHWDhoUkRGWTRzSXFMMVNpWkdmNjJ6N0laClByOHJCemQ5VDFTOHBqS3IwcVZxVVZKblZIQ3RDcWFXNVlVNVltcjZvdU55YW05TmlPa0c1TGptOUR2S1VTcHEKTk9YaFI3SHZxNGlhcUNvVFQrYTZJUkFHSmJVNzg0NWNoLzZ6SHdJREFRQUJBb0lCQUFFTnBDb0lPNitXZUNsVgprbEhLWmhTVm5zZ2dhTUJNMmFILys0ZVNWQ2F5ZnI3c0pjOXZFd2ZTYzg2amVpbnYrYXQzMXczV25PcERwMWlQCnpJeThEM3ZjUzhxdXE0NUUvSlNHdFg3SXZxU0pqWEJSUVF5Sm5OZnZ3U3FVWkZBa1puLzF6R25UL3l2VnFLMXMKeHl0Y1YyY3NNMnBRODdEcVlZeWlOSDlvVXpCRERIWjVjencxV2htZk5CQUZYUUxlNkxiWjVDWDdHS3BKb1F3aQpaRmxHUUNBZ2hBRTcvMWRnZWMxNS9PZ001TzBkNVdkVFhnR0FWQWxsQm8yZE1XK0FLczV6cG50b3RiY2JyUFE3CjRUTGNYb1hMM0RoWXpIVjdWTUpaZ2lWRW1FYWxMUlRVdERhVkp3eTVMZURLeFRCUm9CK1V5bGlEUUFOSUE2S1MKSGZMSEQ4RUNnWUVBNUJHU2IrWTR2UURNRnBHY3J1YzhUcDl2TnVsTHJCRGErT0JQUHVST1lnL2NIWnU1SENIUwpXVVY4YmJVb2V6WWFQL2FCQS9PTFFXME5KeWV1UFpnYXQ2UXFuSFAzTHlBWlhLZ2pqbXgrRnhnaGhCNlYxVXFICllNV1lRdWRlZG5aS3J1Rjh1d3R4Zno0VjBSWVdvTWkrWkJMOHp1QlpiaTBpRlFuS3VvaHhuMkVDZ1lFQS9HTmUKQXR3YTRsSWpsM2lMZXFHbElLZDJENGs4NmRmUUZyblFqa3YzVnIyY0RrcFB4TjFUVzdTY1pDT0FqWjdVTDhpMApqeVk3elh0Q2ovNHJDcEZYNS8yNzV0VGJpR2lNb1ZpazNINWtOVlRPM3BRaGxJMVJvRkFFZUVzZXg5bEtqMWJYClYxMnZENVpZRXU3MmxCREdOVkhWSWdrdU84MHcwd21vaEJFTjRuOENnWUVBa3BkbzFGdlo1RUg2N0JhejZ3ZmUKRDNzUzlPeUhJeFhDYVcxa0FqeWsxUXIwcEdOUFcvR3hUb2dITGt6ZXRETldNLzZ4ZG1TNEFWbWl0cVFlcnFCeApxOC90UTVxV0tzZ3JCUTlkcTFHNHlnZE1vNnMxQzE5WUhLOWs2cnZrVDZoQTRKODJtTk1HSkk4M1hxa2Y2a0NkCmY1MWt1V1FpbDFxVEtZcWRyNys3cUlFQ2dZRUEycnZMbURMbDRjdEtLVlpCbTVCSUtocTRDUkxwaGNpU0FZQWMKclpaTTBCSVlFNUozdTZnTlBHYzFPdHhCNTNzRmJqeEZyK0owNWNxemoxTzZQYmhsTlJ3RUl6UEs1MWVrdVppMwptSmk1aERieDZwajYyV0g0b2pWM0NrSWdkUmR1dFBlUVBabGx4TjZKaWk4cjZIcjVMUEMxQklCc1gwdWZ5dWFOCjg1ZE1MMFVDZ1lCWmYzK04yeENwTU85cVUrOER3V1dweTViK282WXlHNzVGYTBsNU4rdmhmc1ZLamQvT2l1Wm0KbTNPWmJzdTY3Vm5Qc0V4RWUyMjlGd3pVMDBtY21FS3JCdlY3SGR4cW40TXczZkc1NngzTG1JNEtiWktneDRVSgo1U0N6OFo3blRVRTBaN1l3MkNZeElRMi9peVR2VWJ2Y2duQzNScGFOdXo5UjBSR04rckw5cVE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
kind: Secret
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: cilium-ca
  namespace: kube-system
---
apiVersion: v1
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRZVdFNlBiS0dObVg2SGxLWDBsN2RzekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak13TkRJd01UUXdNelF4V2hjTk1qWXdOREU1TVRRdwpNelF4V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRGcyZEt5eCtVcXFEdmdGdzlQMFRJRXdPNUhDZWVUUTN6MDFyOXJjNjEzeUgvdVpsZ0sKdm9MVkNvZi9aenhpZzJ6R0RjY0hPaXBzNE5KUkFjSzg5d0p2amsySVRwVTJwM3ZYWVpUWFZ4US9pWkhSNFhPOApMSU5nWlB3Yis3MjhONUk2bnI5NjYveUdITWRkeGgvTmp6ck16Wit6bHZBTHZBS0RqRE5nbE8xUGJHSWswSVRSCjAzWnhOWFpiWmVWYUhmWXFOdjZnbWMxRHpsejBqSnUyTVRWZGJrWmZ5RkVNVmppd2lvdlZLSmtaL3JiUHNoaysKdnlzSE4zMVBWTHltTXF2U3BXcFJVbWRVY0swS3BwYmxoVGxpYXZxaTQzSnFiMDJJNlFia3VPYjBPOHBSS21vMAo1ZUZIc2UrcmlKcW9LaE5QNXJvaEVBWWx0VHZ6amx5SC9yTWZBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVUyWnFZZElCZEtCb2lTQmJudEVMRUdLYkhFdzh3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFBUURnamNKYUpLL2FUbHRsSnI2WGhhMGNRcHM1SlhQMmEwa2J0YVdUbjJlV1duYStOR1BDNjZoCkJ6Yk5rcHpCZEJPc0c0ZWxPelZ3c2xobk9YS29FMXAwTzR4RXZYeElMZkpFMjNJWmVlVCtrN3RXT2ZpYzRTS3AKeUZhUmNPSjd3eDZITXpkWUZCYWN4ajBXR3ZBUUZ4WmlwNngrSVRMcDNFS1Q1eFR1UjRQa05SM3RzL29WQ2NkSAo5TnAxYm1sL2N0bFlTRFZpemNIK1YxcW5TQzJnZnBrK1FmbVFabzVSVTNMV0VmcEJGdy9PU0FJbkk2ZFVkS3RGCm1BeHZJWkF2cCtkU1FUVVpoWXhJZVFqaExEYXVqSXlDaFJVN1FDVWU2M2NpTk9nQVRWellsTEVmT01QVFByUnUKalJ6WGMyUnpCV0lhSUhQMDR5cWNJM2hGdy9hVDF5ST0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBNE5uU3NzZmxLcWc3NEJjUFQ5RXlCTUR1UndubmswTjg5TmEvYTNPdGQ4aC83bVpZCkNyNkMxUXFILzJjOFlvTnN4ZzNIQnpvcWJPRFNVUUhDdlBjQ2I0NU5pRTZWTnFkNzEyR1UxMWNVUDRtUjBlRnoKdkN5RFlHVDhHL3U5dkRlU09wNi9ldXY4aGh6SFhjWWZ6WTg2ek0yZnM1YndDN3dDZzR3ellKVHRUMnhpSk5DRQowZE4yY1RWMlcyWGxXaDMyS2piK29Kbk5RODVjOUl5YnRqRTFYVzVHWDhoUkRGWTRzSXFMMVNpWkdmNjJ6N0laClByOHJCemQ5VDFTOHBqS3IwcVZxVVZKblZIQ3RDcWFXNVlVNVltcjZvdU55YW05TmlPa0c1TGptOUR2S1VTcHEKTk9YaFI3SHZxNGlhcUNvVFQrYTZJUkFHSmJVNzg0NWNoLzZ6SHdJREFRQUJBb0lCQUFFTnBDb0lPNitXZUNsVgprbEhLWmhTVm5zZ2dhTUJNMmFILys0ZVNWQ2F5ZnI3c0pjOXZFd2ZTYzg2amVpbnYrYXQzMXczV25PcERwMWlQCnpJeThEM3ZjUzhxdXE0NUUvSlNHdFg3SXZxU0pqWEJSUVF5Sm5OZnZ3U3FVWkZBa1puLzF6R25UL3l2VnFLMXMKeHl0Y1YyY3NNMnBRODdEcVlZeWlOSDlvVXpCRERIWjVjencxV2htZk5CQUZYUUxlNkxiWjVDWDdHS3BKb1F3aQpaRmxHUUNBZ2hBRTcvMWRnZWMxNS9PZ001TzBkNVdkVFhnR0FWQWxsQm8yZE1XK0FLczV6cG50b3RiY2JyUFE3CjRUTGNYb1hMM0RoWXpIVjdWTUpaZ2lWRW1FYWxMUlRVdERhVkp3eTVMZURLeFRCUm9CK1V5bGlEUUFOSUE2S1MKSGZMSEQ4RUNnWUVBNUJHU2IrWTR2UURNRnBHY3J1YzhUcDl2TnVsTHJCRGErT0JQUHVST1lnL2NIWnU1SENIUwpXVVY4YmJVb2V6WWFQL2FCQS9PTFFXME5KeWV1UFpnYXQ2UXFuSFAzTHlBWlhLZ2pqbXgrRnhnaGhCNlYxVXFICllNV1lRdWRlZG5aS3J1Rjh1d3R4Zno0VjBSWVdvTWkrWkJMOHp1QlpiaTBpRlFuS3VvaHhuMkVDZ1lFQS9HTmUKQXR3YTRsSWpsM2lMZXFHbElLZDJENGs4NmRmUUZyblFqa3YzVnIyY0RrcFB4TjFUVzdTY1pDT0FqWjdVTDhpMApqeVk3elh0Q2ovNHJDcEZYNS8yNzV0VGJpR2lNb1ZpazNINWtOVlRPM3BRaGxJMVJvRkFFZUVzZXg5bEtqMWJYClYxMnZENVpZRXU3MmxCREdOVkhWSWdrdU84MHcwd21vaEJFTjRuOENnWUVBa3BkbzFGdlo1RUg2N0JhejZ3ZmUKRDNzUzlPeUhJeFhDYVcxa0FqeWsxUXIwcEdOUFcvR3hUb2dITGt6ZXRETldNLzZ4ZG1TNEFWbWl0cVFlcnFCeApxOC90UTVxV0tzZ3JCUTlkcTFHNHlnZE1vNnMxQzE5WUhLOWs2cnZrVDZoQTRKODJtTk1HSkk4M1hxa2Y2a0NkCmY1MWt1V1FpbDFxVEtZcWRyNys3cUlFQ2dZRUEycnZMbURMbDRjdEtLVlpCbTVCSUtocTRDUkxwaGNpU0FZQWMKclpaTTBCSVlFNUozdTZnTlBHYzFPdHhCNTNzRmJqeEZyK0owNWNxemoxTzZQYmhsTlJ3RUl6UEs1MWVrdVppMwptSmk1aERieDZwajYyV0g0b2pWM0NrSWdkUmR1dFBlUVBabGx4TjZKaWk4cjZIcjVMUEMxQklCc1gwdWZ5dWFOCjg1ZE1MMFVDZ1lCWmYzK04yeENwTU85cVUrOER3V1dweTViK282WXlHNzVGYTBsNU4rdmhmc1ZLamQvT2l1Wm0KbTNPWmJzdTY3Vm5Qc0V4RWUyMjlGd3pVMDBtY21FS3JCdlY3SGR4cW40TXczZkc1NngzTG1JNEtiWktneDRVSgo1U0N6OFo3blRVRTBaN1l3MkNZeElRMi9peVR2VWJ2Y2duQzNScGFOdXo5UjBSR04rckw5cVE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
kind: Secret
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: hubble-ca-secret
  namespace: kube-system
---
apiVersion: v1
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRZVdFNlBiS0dObVg2SGxLWDBsN2RzekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak13TkRJd01UUXdNelF4V2hjTk1qWXdOREU1TVRRdwpNelF4V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRGcyZEt5eCtVcXFEdmdGdzlQMFRJRXdPNUhDZWVUUTN6MDFyOXJjNjEzeUgvdVpsZ0sKdm9MVkNvZi9aenhpZzJ6R0RjY0hPaXBzNE5KUkFjSzg5d0p2amsySVRwVTJwM3ZYWVpUWFZ4US9pWkhSNFhPOApMSU5nWlB3Yis3MjhONUk2bnI5NjYveUdITWRkeGgvTmp6ck16Wit6bHZBTHZBS0RqRE5nbE8xUGJHSWswSVRSCjAzWnhOWFpiWmVWYUhmWXFOdjZnbWMxRHpsejBqSnUyTVRWZGJrWmZ5RkVNVmppd2lvdlZLSmtaL3JiUHNoaysKdnlzSE4zMVBWTHltTXF2U3BXcFJVbWRVY0swS3BwYmxoVGxpYXZxaTQzSnFiMDJJNlFia3VPYjBPOHBSS21vMAo1ZUZIc2UrcmlKcW9LaE5QNXJvaEVBWWx0VHZ6amx5SC9yTWZBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVUyWnFZZElCZEtCb2lTQmJudEVMRUdLYkhFdzh3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFBUURnamNKYUpLL2FUbHRsSnI2WGhhMGNRcHM1SlhQMmEwa2J0YVdUbjJlV1duYStOR1BDNjZoCkJ6Yk5rcHpCZEJPc0c0ZWxPelZ3c2xobk9YS29FMXAwTzR4RXZYeElMZkpFMjNJWmVlVCtrN3RXT2ZpYzRTS3AKeUZhUmNPSjd3eDZITXpkWUZCYWN4ajBXR3ZBUUZ4WmlwNngrSVRMcDNFS1Q1eFR1UjRQa05SM3RzL29WQ2NkSAo5TnAxYm1sL2N0bFlTRFZpemNIK1YxcW5TQzJnZnBrK1FmbVFabzVSVTNMV0VmcEJGdy9PU0FJbkk2ZFVkS3RGCm1BeHZJWkF2cCtkU1FUVVpoWXhJZVFqaExEYXVqSXlDaFJVN1FDVWU2M2NpTk9nQVRWellsTEVmT01QVFByUnUKalJ6WGMyUnpCV0lhSUhQMDR5cWNJM2hGdy9hVDF5ST0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTRENDQWpDZ0F3SUJBZ0lRSEFUdmo5Mi8rbGhqdHZjcE5kQXl2ekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak13TkRJd01UUXdNelF4V2hjTk1qWXdOREU1TVRRdwpNelF4V2pBak1TRXdId1lEVlFRRERCZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFERmZCL0tiSHNjUXFLbFdVZDBSVU13K0dFTXMzT0cKc2pKbUFrL0QvZ2x4dCsyVW5jMlM1Nm52NmJkNlFmYm55S1Nra1g2MWhyS0VUNjU2eUdXMmozejZORjhmOEpHVgpLaEJ1UlJKa0JhSm1icWpqdmROeFJuSy9wcmxEblV0aGxTdk9jYnlBWml2U0lHam0wMzNqbGR5Z2tKMzRlYUVCClJrVCtSeW1xM21YcG1QS0tlWkQ5UFVFSERsWXlJTys2VFBjQ2RTaGlSclJlNllBWHFyMU1raUVtYmlXZSs5eFMKcnlhWTdaOForUWw4L1FxVHFFVnFkSmxPaFMwUzFaUmtTbmpLZ05BSnBObjdyUjFVUzRWWUZ3TWxDdEFmYldidwpsK09QdmJad29COXVRWU9xVkZGYkRwcDZUUjYyY0VFLzZEMmZRSFBOSmErYnJYWC81dEVkVENubEFnTUJBQUdqCmdZWXdnWU13RGdZRFZSMFBBUUgvQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUYKQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTUI4R0ExVWRJd1FZTUJhQUZObWFtSFNBWFNnYUlrZ1c1N1JDeEJpbQp4eE1QTUNNR0ExVWRFUVFjTUJxQ0dDb3VhSFZpWW14bExYSmxiR0Y1TG1OcGJHbDFiUzVwYnpBTkJna3Foa2lHCjl3MEJBUXNGQUFPQ0FRRUFJczRVVFF0K2RDeURHbW1Pc0x1c3NKWDN6d21SOU5NVWF5bERraE53aHpEYklLbGsKQTRyUGhnZnYzci8yUkVtUG1qdjBtdGdlbWx1cEdsVDQzUGQvYnZzVXlCbDAydUJLemJMWjNTek1uOFVueTBWYQp6Y1N5N2dKS3YyeVFsMlNteS9VbUdvalJ2Mi9GME10U0dqcDVacHpjYzBTZnNhdFZWRktDUXlQMzdDR0E1SWFPCjhuYmFXQWk4VEZnMmJqdlhqQldYNFBaRFJydUErR1lLVDEwd1Fad3VBSkpBeEpaVDBsMVNSYzcxd1FYa0cyVnIKRlBxNjF2YzdvUFhPbkFJWHpxblFzTFkrM3RTMks2MnFtdlc1dUhpcUJrcXdtckNnRzJ3dmltRXlOMDJIQ0F5cApxc0E3MTRySFBPZnQrMmdPWFNKMmxLL2ZIUng2bU8wOUVLTGFIdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBeFh3ZnlteDdIRUtpcFZsSGRFVkRNUGhoRExOemhySXlaZ0pQdy80SmNiZnRsSjNOCmt1ZXA3K20zZWtIMjU4aWtwSkYrdFlheWhFK3Vlc2hsdG85OCtqUmZIL0NSbFNvUWJrVVNaQVdpWm02bzQ3M1QKY1VaeXY2YTVRNTFMWVpVcnpuRzhnR1lyMGlCbzV0Tjk0NVhjb0pDZCtIbWhBVVpFL2tjcHF0NWw2Wmp5aW5tUQovVDFCQnc1V01pRHZ1a3ozQW5Vb1lrYTBYdW1BRjZxOVRKSWhKbTRsbnZ2Y1VxOG1tTzJmR2ZrSmZQMEtrNmhGCmFuU1pUb1V0RXRXVVpFcDR5b0RRQ2FUWis2MGRWRXVGV0JjREpRclFIMjFtOEpmamo3MjJjS0FmYmtHRHFsUlIKV3c2YWVrMGV0bkJCUCtnOW4wQnp6U1d2bTYxMS8rYlJIVXdwNVFJREFRQUJBb0lCQVFERDlRUitrZUlmQ3FmbApOby9HZWF2UWZjV2ZHcm01b0R5T0tDRUtNNXNmY2dpVy9YYXRISjd0WnBZZkJER0JrUUIrSTdqOVd1anNqVHh1CnJVYndQYlVmZUxRak4wemVIRjB0YmZCdnUzK0g4S281UVhUNzQ1R2RSa3h6SVROWll2R1M2aHpIczVvcjZPanUKa2xGS2NMdjV2MFpnOWgraTZoMHZ5MkUzSVhNeXRFaHpIQ0oyaEZEb2RQTUNIS09VTVh5bFpQN29xWkZxcG9SKwpjc3dIaE01dWg3Ti9SNkpQc3JuMGRvcTFBVWNnZUpLZUkySjVmMlRLYnkrNTFza1RuNlZVWHl1SEJRVWhSOXhvClRRYjRpcGFySFJrVzhBbUt2b1dYNEZ6d2oydkxQbUF6cUtjcE4wYTdXOFZWZ2EvcDFzbDMvT1A4T1NFZWVxK28KaGdjbndQbUpBb0dCQU5OWnhYVFlmUiticEQ2Y1ZFNHBuZ21Fb3hQeW9DU3YwbkkyRWY5SG85VFhzMlFWcTBINQpSL1hPSm93V1lBbkx1enBTNTBDYnNCVFVuKzdPeXdvYldEV3Y5bkFna3ZUeHZSTzVITkZtSzhCU1hLbU9vVEV0CnVzU0xEcVpvekM0SEgwN081VjVxUUtHSkRoWVFtNnllajVUWmw5QlhDaHhSSU9pNWNpK3hkc0pEQW9HQkFPODAKZHZXMEhycjZLR0E2VWl2VElUS0RYV1dBT05hN1RVSGZaUmwzWGFaemtXL1cycnZJSnc1ZmpxWlJOR2k5STVseAp0Y2Y3cVdLUEJ3amxoemZOZ1kxZlVkSTYxdmhyOHNWU0RMZC9YMHIxRGxSM2ZRN1ZJeTBtTjJLcVBKZmxqZXBPCkNwL1NwZTNZcmZrOEZvMmI4VWNmNEpvYWYyTTc4K1ZuY0NMYjVNUzNBb0dBSTdNZ05WSjBJQ2lzSDU5TVpqK0YKWUZvMUthTnNCWVpsWjhGV1hPWis5KzdQY0hKd2tSNUlWMjdRK0F5M2dEQVhtZ3h5MzJqczN6ZmpJL1Z1T25EUAovNUdQY1BVdm5ZeFB3Y3NjNFFuL0RlZGJtNUJxRGVLSmo3VmxiaHA1a3JURlJ3eVBsZGtndmFobTVyYzdkSGI4CkRjcUxhRGVyajRqc3BDTGU5TXRuSWYwQ2dZQXJvS1VGd1RsTm51eVlTR3JPUlc2cm1Od0M5RFRwclRXMUN2cVUKZjNuY0x2M2FxUlF4NVpxQis1bTM2ZDJtTU1ENmJvdmFFcU5kTDNyMysyMERGMzlHZXBrZ3Y4eVBlSmpKdG1KTgpZWFRPNWcwY0NNTU5Yb0JRN3NSeFFWMVYwdTlrU2FHVWJzWUdzRnRpdHJ2aVRndmVqZ2pYOG5kRGNSN1Z1MXp2CmJxMjExd0tCZ0JMVkhBQ2RrU1pndnhIR0NPbUU2amNSSTJqN21SbnFHemtHN0E0bk91azdnQ1Z5amt2ZjFWU1oKR2tIdzljNU9MZDJNdzc2ZDV6OXZnMFQ3U1phUWVMV25OU2d2aFpuSmJBTlpUNk9HOXlyRERHWnR1a2N4ZHdOSApsUHlPd2g4eCtDUTgrVEZpWlgvSWt5eUpxYnBWclYrSUN5clhSMFlyZCtZbUJKZnY4R1o2Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
kind: Secret
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
---
apiVersion: v1
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRZVdFNlBiS0dObVg2SGxLWDBsN2RzekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak13TkRJd01UUXdNelF4V2hjTk1qWXdOREU1TVRRdwpNelF4V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRRGcyZEt5eCtVcXFEdmdGdzlQMFRJRXdPNUhDZWVUUTN6MDFyOXJjNjEzeUgvdVpsZ0sKdm9MVkNvZi9aenhpZzJ6R0RjY0hPaXBzNE5KUkFjSzg5d0p2amsySVRwVTJwM3ZYWVpUWFZ4US9pWkhSNFhPOApMSU5nWlB3Yis3MjhONUk2bnI5NjYveUdITWRkeGgvTmp6ck16Wit6bHZBTHZBS0RqRE5nbE8xUGJHSWswSVRSCjAzWnhOWFpiWmVWYUhmWXFOdjZnbWMxRHpsejBqSnUyTVRWZGJrWmZ5RkVNVmppd2lvdlZLSmtaL3JiUHNoaysKdnlzSE4zMVBWTHltTXF2U3BXcFJVbWRVY0swS3BwYmxoVGxpYXZxaTQzSnFiMDJJNlFia3VPYjBPOHBSS21vMAo1ZUZIc2UrcmlKcW9LaE5QNXJvaEVBWWx0VHZ6amx5SC9yTWZBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVUyWnFZZElCZEtCb2lTQmJudEVMRUdLYkhFdzh3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFBUURnamNKYUpLL2FUbHRsSnI2WGhhMGNRcHM1SlhQMmEwa2J0YVdUbjJlV1duYStOR1BDNjZoCkJ6Yk5rcHpCZEJPc0c0ZWxPelZ3c2xobk9YS29FMXAwTzR4RXZYeElMZkpFMjNJWmVlVCtrN3RXT2ZpYzRTS3AKeUZhUmNPSjd3eDZITXpkWUZCYWN4ajBXR3ZBUUZ4WmlwNngrSVRMcDNFS1Q1eFR1UjRQa05SM3RzL29WQ2NkSAo5TnAxYm1sL2N0bFlTRFZpemNIK1YxcW5TQzJnZnBrK1FmbVFabzVSVTNMV0VmcEJGdy9PU0FJbkk2ZFVkS3RGCm1BeHZJWkF2cCtkU1FUVVpoWXhJZVFqaExEYXVqSXlDaFJVN1FDVWU2M2NpTk9nQVRWellsTEVmT01QVFByUnUKalJ6WGMyUnpCV0lhSUhQMDR5cWNJM2hGdy9hVDF5ST0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURZakNDQWtxZ0F3SUJBZ0lRWU0yWWxnUERuVUZ1Z1RLT1BGRC9JakFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak13TkRJd01UUXdNelF4V2hjTk1qWXdOREU1TVRRdwpNelF4V2pBd01TNHdMQVlEVlFRRERDVXFMblJoYkc5ekxXUmxabUYxYkhRdWFIVmlZbXhsTFdkeWNHTXVZMmxzCmFYVnRMbWx2TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUEyOWlsa0t3T1lSZUsKU2ZCR2hOdGRvemJFbDFiTHE4dTVrdXZkNmlzeW1LbTRudVZod2ViVmpEKzRsNzE5eDdsQ2w3M09MNDNEOEgyeQpKbVVvWlJOQWJES0JmVTdtY1FBMCtNYVQ3QzhuTGJyZkNyaE13WmlBVTQvbXBLT21JV0dOamRGWHFmVVo3NWxJClJ6djRJakFCekY1NnN3U1lmQzJ3aVdOVDlQRWpCZVRFZUhrNlM2SnVRVkp4UFdnUzJsOGFPL1pXUkdoZTJDMWMKdVZxbTdmRWNudjNZZnRSMHkxaUtGc05qcVZaMDViRERMUzZwVWo1dnByQktURER2ZG5LNmdQK1Y3Qyt4VllZVAp3N20yTjQrRHU0RnZleVhmUFRzNklnZWZMNHNCeXR3ZmI1RWVtZnNac2M2RnJIWmNrbGRDNUZabk5Sb1FTVnhjCncxNDhnTXB2R1FJREFRQUJvNEdUTUlHUU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3IKQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWZCZ05WSFNNRUdEQVdnQlRabXBoMApnRjBvR2lKSUZ1ZTBRc1FZcHNjVER6QXdCZ05WSFJFRUtUQW5naVVxTG5SaGJHOXpMV1JsWm1GMWJIUXVhSFZpCllteGxMV2R5Y0dNdVkybHNhWFZ0TG1sdk1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRRGVOVituaXpUTW1melQKd0puMGViVnlmSVdFTDIyVjFCbEtiYmpVbFp1eTUrUXJJYjJIdlR5aG1kbThzS3RIanllZEdHWEZBVnlOcUJzaApQUng5eUx2YVNGdmtNd3YzNXpwZkxua3dvVm9OOXFpclhyVlRzT1FiTDV6TlZaN0pTV3pMRlY3WnBoVDFBL2FsCktSZXZYYTZkbCtpckpqRTlwZ1ZyZzdhcy9rTmREVW9BZS81Mzg1NnRKS0dsbUtVYTd2dVFuUFAxeEo1NTBwalIKMVcwQmc4NWN3LzJOWFZMRjB0VUprM201emowdzY4bFlEblBaYitXYU04YndyT0JSVE8ycGxNNHlnamZOSmNjKwpaN1RBV2NMcWdYMHJDSnJ2YlpwSnk3aXZKeW1hcVpOVEhhanA1Rk5hT2ZwRFRGWEFaWkt2NVB3LzArSy9HWmRhCit3U013WGQwCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBMjlpbGtLd09ZUmVLU2ZCR2hOdGRvemJFbDFiTHE4dTVrdXZkNmlzeW1LbTRudVZoCndlYlZqRCs0bDcxOXg3bENsNzNPTDQzRDhIMnlKbVVvWlJOQWJES0JmVTdtY1FBMCtNYVQ3QzhuTGJyZkNyaE0Kd1ppQVU0L21wS09tSVdHTmpkRlhxZlVaNzVsSVJ6djRJakFCekY1NnN3U1lmQzJ3aVdOVDlQRWpCZVRFZUhrNgpTNkp1UVZKeFBXZ1MybDhhTy9aV1JHaGUyQzFjdVZxbTdmRWNudjNZZnRSMHkxaUtGc05qcVZaMDViRERMUzZwClVqNXZwckJLVEREdmRuSzZnUCtWN0MreFZZWVR3N20yTjQrRHU0RnZleVhmUFRzNklnZWZMNHNCeXR3ZmI1RWUKbWZzWnNjNkZySFpja2xkQzVGWm5OUm9RU1Z4Y3cxNDhnTXB2R1FJREFRQUJBb0lCQVFDZnZ4UEhSUTZKeEhZcQo5ZG40RGdKRFo3ZUFGSVNZUjhlSGw3WS93clhZTW5OQm1vSG5TSmxoZUtma01yL2owWjB1NzYrVDVGbzlOTWl2Cmw0KzdxanFFcEVwdFNGaXdRYXM4SGVjOGxxTE1XdDVaUnNRWFpIM1N1bHlvdzNVakNtUzJhU2hmQ2dlWGozVHkKdGdPK3E4MlN1QkJHWm85NnBDU0VJRlhRUlN2aXloaFg0bGdzSVE1VkpweDBUUVp3anNaaitVNW1BM1hBdUNFdgpaVW5ONDNBMFhOUWtzc0x0Nlkwcjl0T2Z3NC9YVlhWaWJUZ29GT3NFeGJrcmYzRU9TcDExWmxzM2Z2UFl6aCtRClBpcmNpN3UvVUdlZXRPQ1NxVzVIdkxDQy9KUUsyZXJQOHZpNmxjcjRSLzBySGlqdlBqK09vTWsrczNUd1NYUmcKUGM3RkxpTlJBb0dCQU9OUWduSDQ5NFhiK2xYbUhFY2w3ZlZON0JMTXl1bkJNa0x1QmM4QWlMQXV5S2NWNVQ1eQptRWNCMTFaZ1llTEpjc2JpY2ZnYUttUVVpVnltdjhYSlhHT0c0cDhlWHk0aGVuejA3WnF3WERoSEF6a1VnNDFCCkcveXhJSGZQUkxVbGtnOTRsdHZiTkJQc2NXTERoQ0pNL2pYZEhHK0dpZVN4dzJFOEc3eEJoa2xWQW9HQkFQZVcKMzVYeHBsSGN1QkpzVFZMbkR5VGgvLzVwNURielBrbXJDcnk5dVRNVnp2bW5wTFliOVlrYWxwR0dwdlVWbUpjbApzemp0MG45dWJtL3V0ZXZpQ2x2RnFhTzQybm8wbnVJclBEckhjVy9yTUgxbDh0dlNnM05CemsrZGt2cTNhcW16CnQ0eU5Pei9SZHdTeExuVWpqZ0krdllJVmh1NW1xNllvUUt4U3ZqNjFBb0dBYk1kZ1JTNUJOVHVaeG5XQjNzSlYKNTJmTXF3cDVwL2NlR0UxVFZrWUpJMWFnQ3VVOWVPN1oxRkViUFdpT0x6cjd4QlVsT1BjOGhmd1Y1OUtjUHdnbgpRREdTVFZiNWNWZndCOUFsekRyTlJ0a2t2N0lEYWh0WVMwcHdJU1Y4MmJzSzlJQmVvUU43SG5XdHBQZXZTY0xTCmUvQTk1Vmphc0NncE9XVE1XUUI2UktrQ2dZRUFwamJlWVU1NlpzaXp0b0tJb3BoRi9XL1BxUit6dXdRdms4dEYKQ1JLaGExOC90VERMamdwVkd6Y0RVQzFDbHBScC9VYXMvQklFMTlIdVNDek1hdEEwUGdvRDZjcm11VlhzT0UvbwpQbG00bVBjZWRZRGt1cGluOE0rRHpzVXRjQzJFYU9zaTFUUFhTKysyWkNzQzBsY05OZ3FpdE5yNDI4R0hpS1BMClR5UzVYV1VDZ1lFQXFnSjNZVzZ2MjFUWDJWMXp5TVJlZnFsZldLQnNhbEFSbEVVREFGL1g0d1lWUHpQVS9lTnIKZXVEMitwam5XSnpxUi9XdG9rdW5naXVvYm1WVGtYaHhQZVg2UW8zQXpDUThSVUFvL2dZbzZ6WGtHaHAyWCtQYQpLNjYrQjYzSUJDRzNPYVkxcFk1S296TlVSM1liOFFISWt1aXhxc2NvYlcxTnFGRDdNbHFtSEFNPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
kind: Secret
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
    prometheus.io/port: "9964"
    prometheus.io/scrape: "true"
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cilium-agent
    app.kubernetes.io/part-of: cilium
    k8s-app: cilium
  name: cilium-agent
  namespace: kube-system
spec:
  clusterIP: None
  ports:
  - name: envoy-metrics
    port: 9964
    protocol: TCP
    targetPort: envoy-metrics
  selector:
    k8s-app: cilium
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
    prometheus.io/port: "9965"
    prometheus.io/scrape: "true"
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: hubble
    app.kubernetes.io/part-of: cilium
    k8s-app: hubble
  name: hubble-metrics
  namespace: kube-system
spec:
  clusterIP: None
  ports:
  - name: hubble-metrics
    port: 9965
    protocol: TCP
    targetPort: hubble-metrics
  selector:
    k8s-app: cilium
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: hubble-peer
    app.kubernetes.io/part-of: cilium
    k8s-app: cilium
  name: hubble-peer
  namespace: kube-system
spec:
  internalTrafficPolicy: Local
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
  selector:
    k8s-app: cilium
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
    k8s-app: hubble-relay
  name: hubble-relay
  namespace: kube-system
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 4245
  selector:
    k8s-app: hubble-relay
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    k8s-app: hubble-relay
  name: hubble-relay-metrics
  namespace: kube-system
spec:
  clusterIP: None
  ports:
  - name: metrics
    port: 9966
    protocol: TCP
    targetPort: prometheus
  selector:
    k8s-app: hubble-relay
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
    k8s-app: hubble-ui
  name: hubble-ui
  namespace: kube-system
spec:
  ports:
  - name: http
    port: 80
    targetPort: 8081
  selector:
    k8s-app: hubble-ui
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cilium-operator
    app.kubernetes.io/part-of: cilium
    io.cilium/app: operator
    name: cilium-operator
  name: cilium-operator
  namespace: kube-system
spec:
  replicas: 2
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        cilium.io/cilium-configmap-checksum: 8e24e1a47e6f341d9a31a4cbeff1646d4b3b64f671600d1c1583e76d20803a70
        prometheus.io/port: "9963"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: cilium-operator
        app.kubernetes.io/part-of: cilium
        io.cilium/app: operator
        name: cilium-operator
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      automountServiceAccountToken: true
      containers:
      - args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        command:
        - cilium-operator-generic
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        - name: KUBERNETES_SERVICE_HOST
          value: 192.168.50.200
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        image: quay.io/cilium/operator-generic:v1.13.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            host: 127.0.0.1
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        name: cilium-operator
        ports:
        - containerPort: 9963
          hostPort: 9963
          name: prometheus
          protocol: TCP
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /tmp/cilium/config-map
          name: cilium-config-path
          readOnly: true
      hostNetwork: true
      nodeSelector:
        kubernetes.io/os: linux
      priorityClassName: system-node-critical
      restartPolicy: Always
      serviceAccount: cilium-operator
      serviceAccountName: cilium-operator
      tolerations:
      - operator: Exists
      volumes:
      - configMap:
          name: cilium-config
        name: cilium-config-path
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
    k8s-app: hubble-relay
  name: hubble-relay
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        cilium.io/hubble-relay-configmap-checksum: 27301b70a92d3247904e1723ebd50d3d674bd6de3c49138f56111eb8d0161208
      labels:
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
        k8s-app: hubble-relay
    spec:
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      automountServiceAccountToken: false
      containers:
      - args:
        - serve
        command:
        - hubble-relay
        image: quay.io/cilium/hubble-relay:v1.13.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          tcpSocket:
            port: grpc
        name: hubble-relay
        ports:
        - containerPort: 4245
          name: grpc
        - containerPort: 9966
          name: prometheus
          protocol: TCP
        readinessProbe:
          tcpSocket:
            port: grpc
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /etc/hubble-relay
          name: config
          readOnly: true
        - mountPath: /var/lib/hubble-relay/tls
          name: tls
          readOnly: true
      nodeSelector:
        kubernetes.io/os: linux
      priorityClassName: system-node-critical
      restartPolicy: Always
      serviceAccount: hubble-relay
      serviceAccountName: hubble-relay
      terminationGracePeriodSeconds: 1
      volumes:
      - configMap:
          items:
          - key: config.yaml
            path: config.yaml
          name: hubble-relay-config
        name: config
      - name: tls
        projected:
          defaultMode: 256
          sources:
          - secret:
              items:
              - key: ca.crt
                path: hubble-server-ca.crt
              - key: tls.crt
                path: client.crt
              - key: tls.key
                path: client.key
              name: hubble-relay-client-certs
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
    k8s-app: hubble-ui
  name: hubble-ui
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        cilium.io/hubble-ui-nginx-configmap-checksum: 02d6b04b131029fae39270192dcff10fa3a64af9d1d4d0049f1efbc3f5526a34
      labels:
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
        k8s-app: hubble-ui
    spec:
      automountServiceAccountToken: true
      containers:
      - image: quay.io/cilium/hubble-ui:v0.11.0@sha256:bcb369c47cada2d4257d63d3749f7f87c91dde32e010b223597306de95d1ecc8
        imagePullPolicy: IfNotPresent
        name: frontend
        ports:
        - containerPort: 8081
          name: http
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /etc/nginx/conf.d/default.conf
          name: hubble-ui-nginx-conf
          subPath: nginx.conf
        - mountPath: /tmp
          name: tmp-dir
      - env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: hubble-relay:80
        image: quay.io/cilium/hubble-ui-backend:v0.11.0@sha256:14c04d11f78da5c363f88592abae8d2ecee3cbe009f443ef11df6ac5f692d839
        imagePullPolicy: IfNotPresent
        name: backend
        ports:
        - containerPort: 8090
          name: grpc
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts: null
      nodeSelector:
        kubernetes.io/os: linux
      priorityClassName: system-node-critical
      securityContext:
        fsGroup: 1001
        runAsGroup: 1001
        runAsUser: 1001
      serviceAccount: hubble-ui
      serviceAccountName: hubble-ui
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cilium-agent
    app.kubernetes.io/part-of: cilium
    k8s-app: cilium
  name: cilium
  namespace: kube-system
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  template:
    metadata:
      annotations:
        container.apparmor.security.beta.kubernetes.io/cilium-agent: unconfined
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: unconfined
        prometheus.io/port: "9962"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
        k8s-app: cilium
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      automountServiceAccountToken: true
      containers:
      - args:
        - --config-dir=/tmp/cilium/config-map
        command:
        - cilium-agent
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        - name: CILIUM_CNI_CHAINING_MODE
          valueFrom:
            configMapKeyRef:
              key: cni-chaining-mode
              name: cilium-config
              optional: true
        - name: CILIUM_CUSTOM_CNI_CONF
          valueFrom:
            configMapKeyRef:
              key: custom-cni-conf
              name: cilium-config
              optional: true
        - name: KUBERNETES_SERVICE_HOST
          value: 192.168.50.200
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        image: quay.io/cilium/cilium:v1.13.2
        imagePullPolicy: IfNotPresent
        lifecycle:
          postStart:
            exec:
              command:
              - bash
              - -c
              - |
                /cni-install.sh --enable-debug=false --cni-exclusive=true --log-file=/var/run/cilium/cilium-cni.log
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        livenessProbe:
          failureThreshold: 10
          httpGet:
            host: 127.0.0.1
            httpHeaders:
            - name: brief
              value: "true"
            path: /healthz
            port: 9879
            scheme: HTTP
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        name: cilium-agent
        ports:
        - containerPort: 4244
          hostPort: 4244
          name: peer-service
          protocol: TCP
        - containerPort: 9962
          hostPort: 9962
          name: prometheus
          protocol: TCP
        - containerPort: 9964
          hostPort: 9964
          name: envoy-metrics
          protocol: TCP
        - containerPort: 9965
          hostPort: 9965
          name: hubble-metrics
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            host: 127.0.0.1
            httpHeaders:
            - name: brief
              value: "true"
            path: /healthz
            port: 9879
            scheme: HTTP
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        securityContext:
          capabilities:
            add:
            - CHOWN
            - KILL
            - NET_ADMIN
            - NET_RAW
            - IPC_LOCK
            - SYS_ADMIN
            - SYS_RESOURCE
            - DAC_OVERRIDE
            - FOWNER
            - SETGID
            - SETUID
            drop:
            - ALL
          seLinuxOptions:
            level: s0
            type: spc_t
        startupProbe:
          failureThreshold: 105
          httpGet:
            host: 127.0.0.1
            httpHeaders:
            - name: brief
              value: "true"
            path: /healthz
            port: 9879
            scheme: HTTP
          periodSeconds: 2
          successThreshold: 1
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /host/proc/sys/net
          name: host-proc-sys-net
        - mountPath: /host/proc/sys/kernel
          name: host-proc-sys-kernel
        - mountPath: /sys/fs/bpf
          mountPropagation: HostToContainer
          name: bpf-maps
        - mountPath: /sys/fs/cgroup
          name: cilium-cgroup
        - mountPath: /var/run/cilium
          name: cilium-run
        - mountPath: /host/etc/cni/net.d
          name: etc-cni-netd
        - mountPath: /var/lib/cilium/clustermesh
          name: clustermesh-secrets
          readOnly: true
        - mountPath: /lib/modules
          name: lib-modules
          readOnly: true
        - mountPath: /run/xtables.lock
          name: xtables-lock
        - mountPath: /var/lib/cilium/tls/hubble
          name: hubble-tls
          readOnly: true
        - mountPath: /tmp
          name: tmp
      hostNetwork: true
      initContainers:
      - command:
        - cilium
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: KUBERNETES_SERVICE_HOST
          value: 192.168.50.200
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        image: quay.io/cilium/cilium:v1.13.2
        imagePullPolicy: IfNotPresent
        name: config
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /tmp
          name: tmp
      - args:
        - mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf
        command:
        - /bin/bash
        - -c
        - --
        image: quay.io/cilium/cilium:v1.13.2
        imagePullPolicy: IfNotPresent
        name: mount-bpf-fs
        securityContext:
          privileged: true
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
          name: bpf-maps
      - command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              key: clean-cilium-state
              name: cilium-config
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              key: clean-cilium-bpf-state
              name: cilium-config
              optional: true
        - name: KUBERNETES_SERVICE_HOST
          value: 192.168.50.200
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        image: quay.io/cilium/cilium:v1.13.2
        imagePullPolicy: IfNotPresent
        name: clean-cilium-state
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
            - SYS_ADMIN
            - SYS_RESOURCE
            drop:
            - ALL
          seLinuxOptions:
            level: s0
            type: spc_t
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /sys/fs/bpf
          name: bpf-maps
        - mountPath: /sys/fs/cgroup
          mountPropagation: HostToContainer
          name: cilium-cgroup
        - mountPath: /var/run/cilium
          name: cilium-run
      - command:
        - /install-plugin.sh
        image: quay.io/cilium/cilium:v1.13.2
        imagePullPolicy: IfNotPresent
        name: install-cni-binaries
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          capabilities:
            drop:
            - ALL
          seLinuxOptions:
            level: s0
            type: spc_t
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /host/opt/cni/bin
          name: cni-path
      nodeSelector:
        kubernetes.io/os: linux
      priorityClassName: system-node-critical
      restartPolicy: Always
      serviceAccount: cilium
      serviceAccountName: cilium
      terminationGracePeriodSeconds: 1
      tolerations:
      - operator: Exists
      volumes:
      - emptyDir: {}
        name: tmp
      - hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        name: cilium-run
      - hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
        name: bpf-maps
      - hostPath:
          path: /sys/fs/cgroup
          type: DirectoryOrCreate
        name: cilium-cgroup
      - hostPath:
          path: /opt/cni/bin
          type: DirectoryOrCreate
        name: cni-path
      - hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        name: etc-cni-netd
      - hostPath:
          path: /lib/modules
        name: lib-modules
      - hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        name: xtables-lock
      - name: clustermesh-secrets
        secret:
          defaultMode: 256
          optional: true
          secretName: cilium-clustermesh
      - hostPath:
          path: /proc/sys/net
          type: Directory
        name: host-proc-sys-net
      - hostPath:
          path: /proc/sys/kernel
          type: Directory
        name: host-proc-sys-kernel
      - name: hubble-tls
        projected:
          defaultMode: 256
          sources:
          - secret:
              items:
              - key: ca.crt
                path: client-ca.crt
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
              name: hubble-server-certs
              optional: true
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
