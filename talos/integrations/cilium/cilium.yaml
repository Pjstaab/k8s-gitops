# This manifest was generated by automation. DO NOT EDIT.
apiVersion: v1
kind: Namespace
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: cilium-secrets
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: cilium
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: cilium-operator
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: hubble-relay
  namespace: kube-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: hubble-ui
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: cilium
  name: cilium-ingress-secrets
  namespace: cilium-secrets
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: cilium
  name: cilium-operator-ingress-secrets
  namespace: cilium-secrets
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
  - update
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: cilium
  name: cilium-config-agent
  namespace: kube-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: cilium
  name: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - pods
  - endpoints
  - nodes
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  - ciliumbgppeeringpolicies
  - ciliumclusterwideenvoyconfigs
  - ciliumclusterwidenetworkpolicies
  - ciliumegressgatewaypolicies
  - ciliumendpoints
  - ciliumendpointslices
  - ciliumenvoyconfigs
  - ciliumidentities
  - ciliumlocalredirectpolicies
  - ciliumnetworkpolicies
  - ciliumnodes
  - ciliumnodeconfigs
  verbs:
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  - ciliumendpoints
  - ciliumnodes
  verbs:
  - create
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  verbs:
  - delete
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  - ciliumnodes/status
  verbs:
  - get
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  - ciliumendpoints/status
  - ciliumendpoints
  verbs:
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: cilium
  name: cilium-operator
rules:
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - watch
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - services/status
  verbs:
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - namespaces
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - services
  - endpoints
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
  - patch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumclusterwidenetworkpolicies
  verbs:
  - create
  - update
  - deletecollection
  - patch
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/status
  verbs:
  - patch
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpoints
  - ciliumidentities
  verbs:
  - delete
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumidentities
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
- apiGroups:
  - cilium.io
  resources:
  - ciliumnodes/status
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumendpointslices
  - ciliumenvoyconfigs
  verbs:
  - create
  - update
  - get
  - list
  - watch
  - delete
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resourceNames:
  - ciliumloadbalancerippools.cilium.io
  - ciliumbgppeeringpolicies.cilium.io
  - ciliumclusterwideenvoyconfigs.cilium.io
  - ciliumclusterwidenetworkpolicies.cilium.io
  - ciliumegressgatewaypolicies.cilium.io
  - ciliumendpoints.cilium.io
  - ciliumendpointslices.cilium.io
  - ciliumenvoyconfigs.cilium.io
  - ciliumexternalworkloads.cilium.io
  - ciliumidentities.cilium.io
  - ciliumlocalredirectpolicies.cilium.io
  - ciliumnetworkpolicies.cilium.io
  - ciliumnodes.cilium.io
  - ciliumnodeconfigs.cilium.io
  resources:
  - customresourcedefinitions
  verbs:
  - update
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumloadbalancerippools/status
  verbs:
  - patch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses/status
  verbs:
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: cilium
  name: hubble-ui
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - componentstatuses
  - endpoints
  - namespaces
  - nodes
  - pods
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - '*'
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: cilium
  name: cilium-operator-ingress-secrets
  namespace: cilium-secrets
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-operator-ingress-secrets
subjects:
- kind: ServiceAccount
  name: cilium-operator
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: cilium
  name: cilium-secrets
  namespace: cilium-secrets
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-ingress-secrets
subjects:
- kind: ServiceAccount
  name: cilium
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: cilium
  name: cilium-config-agent
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
- kind: ServiceAccount
  name: cilium
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: cilium
  name: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: cilium
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: cilium
  name: cilium-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: cilium-operator
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/part-of: cilium
  name: hubble-ui
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  name: hubble-ui
  namespace: kube-system
---
apiVersion: v1
data:
  agent-not-ready-taint-key: node.cilium.io/agent-not-ready
  arping-refresh-period: 30s
  auto-direct-node-routes: "true"
  bpf-lb-algorithm: maglev
  bpf-lb-external-clusterip: "false"
  bpf-lb-map-max: "65536"
  bpf-lb-mode: hybrid
  bpf-lb-sock: "false"
  bpf-map-dynamic-size-ratio: "0.0025"
  bpf-policy-map-max: "16384"
  bpf-root: /sys/fs/bpf
  cgroup-root: /sys/fs/cgroup
  cilium-endpoint-gc-interval: 5m0s
  cluster-id: "1"
  cluster-name: talos-default
  cni-uninstall: "true"
  custom-cni-conf: "false"
  debug: "false"
  disable-cnp-status-updates: "true"
  disable-endpoint-crd: "false"
  enable-auto-protect-node-port-range: "true"
  enable-bgp-control-plane: "false"
  enable-bpf-clock-probe: "true"
  enable-endpoint-health-checking: "true"
  enable-endpoint-routes: "true"
  enable-envoy-config: "true"
  enable-health-check-nodeport: "true"
  enable-health-checking: "true"
  enable-hubble: "true"
  enable-hubble-open-metrics: "true"
  enable-ingress-controller: "true"
  enable-ingress-secrets-sync: "true"
  enable-ipv4: "true"
  enable-ipv4-masquerade: "true"
  enable-ipv6: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-k8s-terminating-endpoint: "true"
  enable-l2-neigh-discovery: "true"
  enable-l7-proxy: "true"
  enable-local-redirect-policy: "false"
  enable-metrics: "true"
  enable-policy: default
  enable-remote-node-identity: "true"
  enable-sctp: "false"
  enable-svc-source-range-check: "true"
  enable-vtep: "false"
  enable-well-known-identities: "false"
  enable-xt-socket-fallback: "true"
  enforce-ingress-https: "true"
  hubble-disable-tls: "false"
  hubble-listen-address: :4244
  hubble-metrics: dns:query;ignoreAAAA, drop tcp flow port-distribution http icmp
    httpV2:exemplars=true;labelsContext=source_ip\,source_namespace\,source_workload\,destination_ip\,destination_namespace\,destination_workload\,traffic_direction
    policy:sourceContext=app|workload-name|pod|reserved-identity;destinationContext=app|workload-name|pod|dns|reserved-identity;labelsContext=source_namespace,destination_namespace
    httpV2:sourceContext=workload-name|pod-name|reserved-identity;destinationContext=workload-name|pod-name|reserved-identity;labelsContext=source_namespace,destination_namespace,traffic_direction
    kafka:sourceContext=workload-name|pod-name|reserved-identity;destinationContext=workload-name|pod-name|reserved-identity;labelsContext=source_namespace,destination_namespace,traffic_direction
  hubble-metrics-server: :9965
  hubble-socket-path: /var/run/cilium/hubble.sock
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  identity-allocation-mode: crd
  identity-gc-interval: 15m0s
  identity-heartbeat-timeout: 30m0s
  ingress-default-lb-mode: dedicated
  ingress-lb-annotation-prefixes: service.beta.kubernetes.io service.kubernetes.io
    cloud.google.com
  ingress-secrets-namespace: cilium-secrets
  ingress-shared-lb-service-name: cilium-ingress
  install-no-conntrack-iptables-rules: "false"
  ipam: kubernetes
  ipv4-native-routing-cidr: 10.0.0.0/8
  kube-proxy-replacement: strict
  kube-proxy-replacement-healthz-bind-address: 0.0.0.0:10256
  monitor-aggregation: medium
  monitor-aggregation-flags: all
  monitor-aggregation-interval: 5s
  node-port-bind-protection: "true"
  nodes-gc-interval: 5m0s
  operator-api-serve-addr: 127.0.0.1:9234
  operator-prometheus-serve-addr: :9963
  preallocate-bpf-maps: "false"
  procfs: /host/proc
  prometheus-serve-addr: :9962
  proxy-prometheus-port: "9964"
  remove-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  sidecar-istio-proxy-image: cilium/istio_proxy
  skip-cnp-status-startup-clean: "false"
  synchronize-k8s-nodes: "true"
  tofqdns-dns-reject-response-code: refused
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: 0s
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-min-ttl: "3600"
  tofqdns-proxy-response-max-delay: 100ms
  tunnel: disabled
  unmanaged-pod-watcher-interval: "15"
  vtep-cidr: ""
  vtep-endpoint: ""
  vtep-mac: ""
  vtep-mask: ""
kind: ConfigMap
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: cilium-config
  namespace: kube-system
---
apiVersion: v1
data:
  hubble-l7-http-metrics-by-workload.json: |
    {
      "__inputs": [],
      "__elements": {},
      "__requires": [
        {
          "type": "grafana",
          "id": "grafana",
          "name": "Grafana",
          "version": "9.0.5"
        },
        {
          "type": "datasource",
          "id": "prometheus",
          "name": "Prometheus",
          "version": "1.0.0"
        },
        {
          "type": "panel",
          "id": "stat",
          "name": "Stat",
          "version": ""
        },
        {
          "type": "panel",
          "id": "timeseries",
          "name": "Time series",
          "version": ""
        }
      ],
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": {
              "type": "grafana",
              "uid": "-- Grafana --"
            },
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "target": {
              "limit": 100,
              "matchAny": false,
              "tags": [],
              "type": "dashboard"
            },
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "fiscalYearStartMonth": 0,
      "graphTooltip": 1,
      "id": null,
      "links": [],
      "liveNow": false,
      "panels": [
        {
          "collapsed": false,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 0
          },
          "id": 14,
          "panels": [],
          "title": "General",
          "type": "row"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "reqps"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 5,
            "w": 8,
            "x": 0,
            "y": 1
          },
          "id": 16,
          "options": {
            "colorMode": "value",
            "graphMode": "area",
            "justifyMode": "auto",
            "orientation": "auto",
            "reduceOptions": {
              "calcs": [
                "lastNotNull"
              ],
              "fields": "",
              "values": false
            },
            "textMode": "auto"
          },
          "pluginVersion": "9.0.5",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "expr": "round(sum(rate(hubble_http_requests_total{reporter=~\"${reporter}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\"}[$__rate_interval])), 0.001)",
              "refId": "A"
            }
          ],
          "title": "Incoming Request Volume",
          "type": "stat"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "percentunit"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 5,
            "w": 8,
            "x": 8,
            "y": 1
          },
          "id": 17,
          "options": {
            "colorMode": "value",
            "graphMode": "area",
            "justifyMode": "auto",
            "orientation": "auto",
            "reduceOptions": {
              "calcs": [
                "lastNotNull"
              ],
              "fields": "",
              "values": false
            },
            "textMode": "auto"
          },
          "pluginVersion": "9.0.5",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": false,
              "expr": "sum(rate(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", status!~\"5.*\"}[$__rate_interval]))\n/\nsum(rate(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\"}[$__rate_interval]))",
              "interval": "",
              "legendFormat": "{{ cluster }} {{ method }} {{ source_namespace }}/{{ source_workload }}",
              "range": true,
              "refId": "A"
            }
          ],
          "title": "Incoming Request Success Rate (non-5xx responses)",
          "type": "stat"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "s"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 5,
            "w": 8,
            "x": 16,
            "y": 1
          },
          "id": 18,
          "options": {
            "legend": {
              "calcs": [
                "lastNotNull"
              ],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "pluginVersion": "9.0.5",
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": false,
              "expr": "histogram_quantile(0.50, sum(rate(hubble_http_request_duration_seconds_bucket{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\"}[$__rate_interval])) by (le))",
              "interval": "",
              "legendFormat": "P50",
              "range": true,
              "refId": "A"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": false,
              "expr": "histogram_quantile(0.95, sum(rate(hubble_http_request_duration_seconds_bucket{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\"}[$__rate_interval])) by (le))",
              "hide": false,
              "interval": "",
              "legendFormat": "P95",
              "range": true,
              "refId": "B"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": false,
              "expr": "histogram_quantile(0.99, sum(rate(hubble_http_request_duration_seconds_bucket{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\"}[$__rate_interval])) by (le))",
              "hide": false,
              "interval": "",
              "legendFormat": "P99",
              "range": true,
              "refId": "C"
            }
          ],
          "title": "Request Duration",
          "type": "timeseries"
        },
        {
          "collapsed": false,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 6
          },
          "id": 6,
          "panels": [],
          "title": "Requests by Source",
          "type": "row"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "reqps"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 7
          },
          "id": 3,
          "options": {
            "legend": {
              "calcs": [
                "max",
                "mean",
                "sum",
                "lastNotNull"
              ],
              "displayMode": "table",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": false,
              "expr": "round(sum(rate(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\"}[$__rate_interval])) by (cluster, source_namespace, source_workload, status), 0.001)",
              "interval": "",
              "legendFormat": "{{ cluster }} {{ method }} {{ source_namespace }}/{{ source_workload }}: {{ status }}",
              "range": true,
              "refId": "A"
            }
          ],
          "title": "Incoming Requests by Source and Response Code",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "percentunit"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 7
          },
          "id": 7,
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "min",
                "max",
                "lastNotNull"
              ],
              "displayMode": "table",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": false,
              "expr": "sum(rate(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\",status!~\"5.*\"}[$__rate_interval])) by (cluster, source_namespace, source_workload)\n/\nsum(rate(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\"}[$__rate_interval])) by (cluster, source_namespace, source_workload)",
              "interval": "",
              "legendFormat": "{{ cluster }} {{ method }} {{ source_namespace }}/{{ source_workload }}",
              "range": true,
              "refId": "A"
            }
          ],
          "title": "Incoming Request Success Rate (non-5xx responses) By Source",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "s"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 17
          },
          "id": 4,
          "options": {
            "legend": {
              "calcs": [
                "min",
                "max",
                "mean",
                "lastNotNull"
              ],
              "displayMode": "table",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": true,
              "expr": "histogram_quantile(0.50, sum(rate(hubble_http_request_duration_seconds_bucket{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\"}[$__rate_interval])) by (cluster, source_namespace, source_workload, le))",
              "interval": "",
              "legendFormat": "{{ cluster }} {{ source_namespace }}/{{ source_workload }} P50",
              "range": true,
              "refId": "A"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": true,
              "expr": "histogram_quantile(0.95, sum(rate(hubble_http_request_duration_seconds_bucket{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\"}[$__rate_interval])) by (cluster, source_namespace, source_workload, le))",
              "hide": false,
              "interval": "",
              "legendFormat": "{{ cluster }} {{ source_namespace }}/{{ source_workload }} P95",
              "range": true,
              "refId": "B"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": true,
              "expr": "histogram_quantile(0.99, sum(rate(hubble_http_request_duration_seconds_bucket{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\"}[$__rate_interval])) by (cluster, source_namespace, source_workload, le))",
              "hide": false,
              "interval": "",
              "legendFormat": "{{ cluster }} {{ source_namespace }}/{{ source_workload }} P99",
              "range": true,
              "refId": "C"
            }
          ],
          "title": "HTTP Request Duration by Source",
          "type": "timeseries"
        },
        {
          "collapsed": false,
          "gridPos": {
            "h": 1,
            "w": 24,
            "x": 0,
            "y": 27
          },
          "id": 9,
          "panels": [],
          "title": "Requests by Destination",
          "type": "row"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "reqps"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 28
          },
          "id": 10,
          "options": {
            "legend": {
              "calcs": [
                "max",
                "mean",
                "sum",
                "lastNotNull"
              ],
              "displayMode": "table",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": false,
              "expr": "round(sum(rate(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\"}[$__rate_interval])) by (cluster, destination_namespace, destination_workload, status), 0.001)",
              "interval": "",
              "legendFormat": "{{ cluster }} {{ method }} {{ destination_namespace }}/{{ destination_workload }}: {{ status }}",
              "range": true,
              "refId": "A"
            }
          ],
          "title": "Incoming Requests by Destination and Response Code",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "percentunit"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 12,
            "y": 28
          },
          "id": 11,
          "options": {
            "legend": {
              "calcs": [
                "mean",
                "min",
                "max",
                "lastNotNull"
              ],
              "displayMode": "table",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": false,
              "expr": "sum(rate(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\",status!~\"5.*\"}[$__rate_interval])) by (cluster, destination_namespace, destination_workload)\n/\nsum(rate(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\"}[$__rate_interval])) by (cluster, destination_namespace, destination_workload)",
              "interval": "",
              "legendFormat": "{{ cluster }} {{ method }} {{ destination_namespace }}/{{ destination_workload }}",
              "range": true,
              "refId": "A"
            }
          ],
          "title": "Incoming Request Success Rate (non-5xx responses) By Destination",
          "type": "timeseries"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_PROMETHEUS}"
          },
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 0,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "viz": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "auto",
                "spanNulls": false,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "mappings": [],
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green"
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "s"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 10,
            "w": 12,
            "x": 0,
            "y": 38
          },
          "id": 12,
          "options": {
            "legend": {
              "calcs": [
                "min",
                "max",
                "mean",
                "lastNotNull"
              ],
              "displayMode": "table",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single",
              "sort": "none"
            }
          },
          "targets": [
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": true,
              "expr": "histogram_quantile(0.50, sum(rate(hubble_http_request_duration_seconds_bucket{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\"}[$__rate_interval])) by (cluster, destination_namespace, destination_workload, le))",
              "interval": "",
              "legendFormat": "{{ cluster }} {{ destination_namespace }}/{{ destination_workload }} P50",
              "range": true,
              "refId": "A"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": true,
              "expr": "histogram_quantile(0.95, sum(rate(hubble_http_request_duration_seconds_bucket{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\"}[$__rate_interval])) by (cluster, destination_namespace, destination_workload, le))",
              "hide": false,
              "interval": "",
              "legendFormat": "{{ cluster }} {{ destination_namespace }}/{{ destination_workload }} P95",
              "range": true,
              "refId": "B"
            },
            {
              "datasource": {
                "type": "prometheus",
                "uid": "${DS_PROMETHEUS}"
              },
              "editorMode": "code",
              "exemplar": true,
              "expr": "histogram_quantile(0.99, sum(rate(hubble_http_request_duration_seconds_bucket{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", reporter=\"${reporter}\", source_namespace=~\"${source_namespace}\", source_workload=~\"${source_workload}\"}[$__rate_interval])) by (cluster, destination_namespace, destination_workload, le))",
              "hide": false,
              "interval": "",
              "legendFormat": "{{ cluster }} {{ destination_namespace }}/{{ destination_workload }} P99",
              "range": true,
              "refId": "C"
            }
          ],
          "title": "HTTP Request Duration by Destination",
          "type": "timeseries"
        }
      ],
      "refresh": "30s",
      "schemaVersion": 36,
      "style": "dark",
      "tags": [],
      "templating": {
        "list": [
          {
            "current": {},
            "hide": 0,
            "includeAll": false,
            "label": "Prometheus",
            "multi": false,
            "name": "DS_PROMETHEUS",
            "options": [],
            "query": "prometheus",
            "queryValue": "",
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "type": "datasource"
          },
          {
            "current": {},
            "datasource": {
              "type": "prometheus",
              "uid": "${DS_PROMETHEUS}"
            },
            "definition": "label_values(hubble_http_requests_total, cluster)",
            "hide": 0,
            "includeAll": false,
            "label": "Cluster",
            "multi": false,
            "name": "cluster",
            "options": [],
            "query": {
              "query": "label_values(hubble_http_requests_total, cluster)",
              "refId": "StandardVariableQuery"
            },
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 2,
            "type": "query"
          },
          {
            "current": {},
            "datasource": {
              "type": "prometheus",
              "uid": "${DS_PROMETHEUS}"
            },
            "definition": "label_values(hubble_http_requests_total{cluster=~\"${cluster}\"}, destination_namespace)",
            "description": "",
            "hide": 0,
            "includeAll": false,
            "label": "Destination Namespace",
            "multi": false,
            "name": "destination_namespace",
            "options": [],
            "query": {
              "query": "label_values(hubble_http_requests_total{cluster=~\"${cluster}\"}, destination_namespace)",
              "refId": "StandardVariableQuery"
            },
            "refresh": 2,
            "regex": "",
            "skipUrlSync": false,
            "sort": 2,
            "type": "query"
          },
          {
            "current": {},
            "datasource": {
              "type": "prometheus",
              "uid": "${DS_PROMETHEUS}"
            },
            "definition": "label_values(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\"}, destination_workload)",
            "hide": 0,
            "includeAll": false,
            "label": "Destination Workload",
            "multi": false,
            "name": "destination_workload",
            "options": [],
            "query": {
              "query": "label_values(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\"}, destination_workload)",
              "refId": "StandardVariableQuery"
            },
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 2,
            "type": "query"
          },
          {
            "current": {},
            "datasource": {
              "type": "prometheus",
              "uid": "${DS_PROMETHEUS}"
            },
            "definition": "label_values(hubble_http_requests_total, reporter)",
            "hide": 0,
            "includeAll": false,
            "label": "Reporter",
            "multi": false,
            "name": "reporter",
            "options": [],
            "query": {
              "query": "label_values(hubble_http_requests_total, reporter)",
              "refId": "StandardVariableQuery"
            },
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "type": "query"
          },
          {
            "current": {},
            "datasource": {
              "type": "prometheus",
              "uid": "${DS_PROMETHEUS}"
            },
            "definition": "label_values(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\"}, source_namespace)",
            "hide": 0,
            "includeAll": true,
            "label": "Source Namespace",
            "multi": true,
            "name": "source_namespace",
            "options": [],
            "query": {
              "query": "label_values(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\"}, source_namespace)",
              "refId": "StandardVariableQuery"
            },
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "type": "query"
          },
          {
            "current": {},
            "datasource": {
              "type": "prometheus",
              "uid": "${DS_PROMETHEUS}"
            },
            "definition": "label_values(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", source_namespace=~\"${source_namespace}\"}, source_workload)",
            "hide": 0,
            "includeAll": true,
            "label": "Source Workload",
            "multi": true,
            "name": "source_workload",
            "options": [],
            "query": {
              "query": "label_values(hubble_http_requests_total{cluster=~\"${cluster}\", destination_namespace=~\"${destination_namespace}\", destination_workload=~\"${destination_workload}\", source_namespace=~\"${source_namespace}\"}, source_workload)",
              "refId": "StandardVariableQuery"
            },
            "refresh": 1,
            "regex": "",
            "skipUrlSync": false,
            "sort": 0,
            "type": "query"
          }
        ]
      },
      "time": {
        "from": "now-6h",
        "to": "now"
      },
      "timepicker": {},
      "timezone": "",
      "title": "Hubble L7 HTTP Metrics by Workload",
      "uid": "3g264CZVz",
      "version": 2,
      "weekStart": ""
    }
kind: ConfigMap
metadata:
  annotations:
    grafana_folder: Cilium
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: hubble
    app.kubernetes.io/part-of: cilium
    grafana_dashboard: "1"
    k8s-app: hubble
  name: hubble-l7-http-metrics-by-workload
  namespace: kube-system
---
apiVersion: v1
data:
  config.yaml: "cluster-name: talos-default\npeer-service: \"hubble-peer.kube-system.svc.cluster.local:443\"\nlisten-address:
    :4245\nmetrics-listen-address: \":9966\"\ndial-timeout: \nretry-timeout: \nsort-buffer-len-max:
    \nsort-buffer-drain-timeout: \ntls-client-cert-file: /var/lib/hubble-relay/tls/client.crt\ntls-client-key-file:
    /var/lib/hubble-relay/tls/client.key\ntls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt\ndisable-server-tls:
    true\n"
kind: ConfigMap
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: hubble-relay-config
  namespace: kube-system
---
apiVersion: v1
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name
    \ localhost;\n    root /app;\n    index index.html;\n    client_max_body_size
    1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header
    X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods
    \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin
    *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers
    content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers
    range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n
    \       if ($request_method = OPTIONS) {\n            return 204;\n        }\n
    \       # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n
    \           proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n
    \           proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n
    \           # double `/index.html` is required here \n            try_files $uri
    $uri/ /index.html /index.html;\n        }\n    }\n}"
kind: ConfigMap
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: hubble-ui-nginx
  namespace: kube-system
---
apiVersion: v1
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRQ0EwVmVRUk5FZEdDd09CeDI0cHpnVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak13TkRJd01UUXhPVE01V2hjTk1qWXdOREU1TVRReApPVE01V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQzZZbGRybTZqOEp6ZEtRS3NHOC9YaTR3VGFqTE1JMHhtajBvV3YyaGkxbmNTc2ErdGUKbS9qSTVvYkZ1RnY2VWVDVTkyS3UxbkdHci9KZ3kya1pUMWpiNjgwWDhJSVh5MExBUWdPMkY5SnZaZVFnQWNGQwpWUENMWnpKR01ETGgwYThScjQzeUkzM1Q3TDFQUllsWFBFY2tRL1RqTzg4Y0RMd1lzSUd4QitpbjlWRmswQmZPCnZnZzQ3YmI4UFlDTi9nY2dIK2VBVlNmZnp3QStwVUI3U2JWQmxkUjRuUE1UWlYrRW9YQWhzNHNVT29hNzFlNncKS0doSkRadlkvcDg5azVxb3hXbEliTU1TZkVwNmtLUFRiWUpma0Q1SUVkNDloU2RJWDNsY0NKMXVrSHVXM080RQpEcTRaU3p4UldnNGVIUGlGYXV0Y08xRXlMYmVMaUllZlpGSEhBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVETWFXVXZtTXczb0gwQnhFSVZuclVURWJybGt3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFKMFpYOHozNjlWSW9aN2FFd0lIN3hJSTdoZ3BUa29mR2V0Vy9hTkNqWldXSnF5V05wRjlmSldQCkcvWkEwL2lqTG1ka3NYdGNTZ2c0TEp5RXU1TFdORE1MUm9GRUJNWS9UQzF1Tng3VnhoRWJLY3VaLy9SbGpKMU0KK1VqU2NBSm9DbkJ3d2RSZlU3TTBmOUxRMG9yUUx2U1FkamJCRlNubE50c3ZpZnBMek44VlcrQjdJTFJnTThvcQpCZm15ZFJ5alErblcrWXJQaUpHYTZId3RRdEFyeUNGR2p2eWdPRnZaNStrRUFYSGwwYnF2c01qcUtHOXdQOVd6CnB0TmQ3Zkg2SDl3TUsxc2NTY29jaERwek9EQ1NGNStBN1F0VGx5aUVwdVFyRkhhMU9VREQwdjEwbFlTd0FheHcKSXNJSTV6azFkSlhZWkQrOFR4TU9zTEdZcVByRjNTaz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBdW1KWGE1dW8vQ2MzU2tDckJ2UDE0dU1FMm95ekNOTVpvOUtGcjlvWXRaM0VyR3ZyClhwdjR5T2FHeGJoYitsSGdsUGRpcnRaeGhxL3lZTXRwR1U5WTIrdk5GL0NDRjh0Q3dFSUR0aGZTYjJYa0lBSEIKUWxUd2kyY3lSakF5NGRHdkVhK044aU45MCt5OVQwV0pWenhISkVQMDR6dlBIQXk4R0xDQnNRZm9wL1ZSWk5BWAp6cjRJT08yMi9EMkFqZjRISUIvbmdGVW4zODhBUHFWQWUwbTFRWlhVZUp6ekUyVmZoS0Z3SWJPTEZEcUd1OVh1CnNDaG9TUTJiMlA2ZlBaT2FxTVZwU0d6REVueEtlcENqMDIyQ1g1QStTQkhlUFlVblNGOTVYQWlkYnBCN2x0enUKQkE2dUdVczhVVm9PSGh6NGhXcnJYRHRSTWkyM2k0aUhuMlJSeHdJREFRQUJBb0lCQURMSTB1c1dLZEF5MjBUWApKQUtyL0lhS3R1clp4WHFWRW5wcHhWVnFCcXVOeG1YNHJkUkVpV0FzTi9LdHpob0JyMERIdTFMS1NYcWFmRjlWCmJWaWhIeVFsTnVmYjk0YUdNclR5QjlMWTROVExuWUgvR0dwN2ZHTnZoZXBML2NFOEFnaStuZDJwUUFLN2tjV0UKdSt4U0YweFJXK3VDZzJjd0xSeEpFNzFwMjBIUUJkSWovR01tSy81Q0dBL2Y0eDZsZ1NKUkhPR3hIYngrTllFYwpnY3k4bUh1Q0NWV2ZkcmJyWGFWWFU1VTBMQzgvYzIzalQ1RXNxc3NpQU1wTzFYd09CckFUKzJhOER4L093Wm1hCjYyL2dEZ3MxTEt4THZHTEF2ZFY3ajdJV2JONG5Qb1R1ZEowMUNRaEM2dVJxSnp1ejR3Z0JUWktFOHV6VDRPVDIKbld2NWl1a0NnWUVBNS9BaW4yUDByL0NWZ3VkZ0pqKy9RYkE1dzJKNDhkZG5wck9ONHgvb1llWWt1ZE9GaStQagpQeExNK1FDTlJHaVg0ZEFNcEN0RkpuVmlOTitMekdBVnpTTkVWNythVDF6L0lOcElrSllYMmJWK1VKRGlQNW95Clc3TlF6RndCbE9ZMmdQbmxSWWhMcmVvNXN4TWY1MzF4SXJYbW04ZWl6NHg5OTJQemJyeHUya1VDZ1lFQXpiaGcKSWtGUmhZVnQ4bDE5L1M5WGlHa3IrOWxyYkRid2hJd05OMHFENXJQSnNHNzV1UFFLZTlkeDJTcWt2bUtrSEhOaAppTHNhZ2t5WSt6K1dFSmtkZTI1eExWMXJpUGludzRFNDJYOGxDQ3J5MWRNcURDaXRGd3RhY0lrUWpadENXNVNDCmJJVXpMV2o1Q0pKWnoyRk55MG9acEZMaXhvVm5oM3g1UEpNMUlwc0NnWUJFTTJtSzR2S0ZkY0lSRHdaSDJRRGQKU1B1RFI0WjIzcmM4M3BsL1N0ZWpTZkJNc0RVWjBIWDNDd2s0d3YvSE9OWkljVXYyVGo3ME14b2dvQWRVbm9CcQpwTThvMms5K3ZNTE1uME10T09Wa2dDalhlZkw5YnRNV0FlRmxaanlVMHlqOXZmMjc5M3NCZGRsbm5kMEl6ZXNoCm9NbGh6MDlCcG5jMzhxMFhSOU4wM1FLQmdCbG5aRSsybXplTzA1WHpYNlNOWFJUV1QvMG95ekF3MUtDNW5zUXUKS24ycHhBVktud0hzK1FKMEIzWVc0d016c1NwbVFTd2VWdGF5V00zbCswVVBjMm1UcU53K1JoSkRDb3lFLzUwMApLMEdIOURiZGZickVweU5LWHArNC9WZFBUZkY3TkdQc1N2YVhtUEVyQ1hZbmdQRFN0TG5yRm1BSGgxSmUxNlhZClU5NXpBb0dBTWdSTkRYRytCRHVMQUNxbWhRRjRvbTBObEFTalVEbERLdGYvaG1kdXhMWGRhbDZPZDA5YmttRzgKNFR2d2ZqL1QxVEl0RzUyRG1RdVVaT1NkZHE5eTFuZXJLcmNzS3ZpWHNTVUVGZVo1UXBUTmpqdnpFWHJOWnBwNApXQ2tpQmtFeUkxRWYxc2J6a0hIYnMvbXZDWHJCbDcraXlMZXUrek5uZVB0M2JLOHJlcG89Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
kind: Secret
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: cilium-ca
  namespace: kube-system
---
apiVersion: v1
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRQ0EwVmVRUk5FZEdDd09CeDI0cHpnVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak13TkRJd01UUXhPVE01V2hjTk1qWXdOREU1TVRReApPVE01V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQzZZbGRybTZqOEp6ZEtRS3NHOC9YaTR3VGFqTE1JMHhtajBvV3YyaGkxbmNTc2ErdGUKbS9qSTVvYkZ1RnY2VWVDVTkyS3UxbkdHci9KZ3kya1pUMWpiNjgwWDhJSVh5MExBUWdPMkY5SnZaZVFnQWNGQwpWUENMWnpKR01ETGgwYThScjQzeUkzM1Q3TDFQUllsWFBFY2tRL1RqTzg4Y0RMd1lzSUd4QitpbjlWRmswQmZPCnZnZzQ3YmI4UFlDTi9nY2dIK2VBVlNmZnp3QStwVUI3U2JWQmxkUjRuUE1UWlYrRW9YQWhzNHNVT29hNzFlNncKS0doSkRadlkvcDg5azVxb3hXbEliTU1TZkVwNmtLUFRiWUpma0Q1SUVkNDloU2RJWDNsY0NKMXVrSHVXM080RQpEcTRaU3p4UldnNGVIUGlGYXV0Y08xRXlMYmVMaUllZlpGSEhBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVETWFXVXZtTXczb0gwQnhFSVZuclVURWJybGt3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFKMFpYOHozNjlWSW9aN2FFd0lIN3hJSTdoZ3BUa29mR2V0Vy9hTkNqWldXSnF5V05wRjlmSldQCkcvWkEwL2lqTG1ka3NYdGNTZ2c0TEp5RXU1TFdORE1MUm9GRUJNWS9UQzF1Tng3VnhoRWJLY3VaLy9SbGpKMU0KK1VqU2NBSm9DbkJ3d2RSZlU3TTBmOUxRMG9yUUx2U1FkamJCRlNubE50c3ZpZnBMek44VlcrQjdJTFJnTThvcQpCZm15ZFJ5alErblcrWXJQaUpHYTZId3RRdEFyeUNGR2p2eWdPRnZaNStrRUFYSGwwYnF2c01qcUtHOXdQOVd6CnB0TmQ3Zkg2SDl3TUsxc2NTY29jaERwek9EQ1NGNStBN1F0VGx5aUVwdVFyRkhhMU9VREQwdjEwbFlTd0FheHcKSXNJSTV6azFkSlhZWkQrOFR4TU9zTEdZcVByRjNTaz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBdW1KWGE1dW8vQ2MzU2tDckJ2UDE0dU1FMm95ekNOTVpvOUtGcjlvWXRaM0VyR3ZyClhwdjR5T2FHeGJoYitsSGdsUGRpcnRaeGhxL3lZTXRwR1U5WTIrdk5GL0NDRjh0Q3dFSUR0aGZTYjJYa0lBSEIKUWxUd2kyY3lSakF5NGRHdkVhK044aU45MCt5OVQwV0pWenhISkVQMDR6dlBIQXk4R0xDQnNRZm9wL1ZSWk5BWAp6cjRJT08yMi9EMkFqZjRISUIvbmdGVW4zODhBUHFWQWUwbTFRWlhVZUp6ekUyVmZoS0Z3SWJPTEZEcUd1OVh1CnNDaG9TUTJiMlA2ZlBaT2FxTVZwU0d6REVueEtlcENqMDIyQ1g1QStTQkhlUFlVblNGOTVYQWlkYnBCN2x0enUKQkE2dUdVczhVVm9PSGh6NGhXcnJYRHRSTWkyM2k0aUhuMlJSeHdJREFRQUJBb0lCQURMSTB1c1dLZEF5MjBUWApKQUtyL0lhS3R1clp4WHFWRW5wcHhWVnFCcXVOeG1YNHJkUkVpV0FzTi9LdHpob0JyMERIdTFMS1NYcWFmRjlWCmJWaWhIeVFsTnVmYjk0YUdNclR5QjlMWTROVExuWUgvR0dwN2ZHTnZoZXBML2NFOEFnaStuZDJwUUFLN2tjV0UKdSt4U0YweFJXK3VDZzJjd0xSeEpFNzFwMjBIUUJkSWovR01tSy81Q0dBL2Y0eDZsZ1NKUkhPR3hIYngrTllFYwpnY3k4bUh1Q0NWV2ZkcmJyWGFWWFU1VTBMQzgvYzIzalQ1RXNxc3NpQU1wTzFYd09CckFUKzJhOER4L093Wm1hCjYyL2dEZ3MxTEt4THZHTEF2ZFY3ajdJV2JONG5Qb1R1ZEowMUNRaEM2dVJxSnp1ejR3Z0JUWktFOHV6VDRPVDIKbld2NWl1a0NnWUVBNS9BaW4yUDByL0NWZ3VkZ0pqKy9RYkE1dzJKNDhkZG5wck9ONHgvb1llWWt1ZE9GaStQagpQeExNK1FDTlJHaVg0ZEFNcEN0RkpuVmlOTitMekdBVnpTTkVWNythVDF6L0lOcElrSllYMmJWK1VKRGlQNW95Clc3TlF6RndCbE9ZMmdQbmxSWWhMcmVvNXN4TWY1MzF4SXJYbW04ZWl6NHg5OTJQemJyeHUya1VDZ1lFQXpiaGcKSWtGUmhZVnQ4bDE5L1M5WGlHa3IrOWxyYkRid2hJd05OMHFENXJQSnNHNzV1UFFLZTlkeDJTcWt2bUtrSEhOaAppTHNhZ2t5WSt6K1dFSmtkZTI1eExWMXJpUGludzRFNDJYOGxDQ3J5MWRNcURDaXRGd3RhY0lrUWpadENXNVNDCmJJVXpMV2o1Q0pKWnoyRk55MG9acEZMaXhvVm5oM3g1UEpNMUlwc0NnWUJFTTJtSzR2S0ZkY0lSRHdaSDJRRGQKU1B1RFI0WjIzcmM4M3BsL1N0ZWpTZkJNc0RVWjBIWDNDd2s0d3YvSE9OWkljVXYyVGo3ME14b2dvQWRVbm9CcQpwTThvMms5K3ZNTE1uME10T09Wa2dDalhlZkw5YnRNV0FlRmxaanlVMHlqOXZmMjc5M3NCZGRsbm5kMEl6ZXNoCm9NbGh6MDlCcG5jMzhxMFhSOU4wM1FLQmdCbG5aRSsybXplTzA1WHpYNlNOWFJUV1QvMG95ekF3MUtDNW5zUXUKS24ycHhBVktud0hzK1FKMEIzWVc0d016c1NwbVFTd2VWdGF5V00zbCswVVBjMm1UcU53K1JoSkRDb3lFLzUwMApLMEdIOURiZGZickVweU5LWHArNC9WZFBUZkY3TkdQc1N2YVhtUEVyQ1hZbmdQRFN0TG5yRm1BSGgxSmUxNlhZClU5NXpBb0dBTWdSTkRYRytCRHVMQUNxbWhRRjRvbTBObEFTalVEbERLdGYvaG1kdXhMWGRhbDZPZDA5YmttRzgKNFR2d2ZqL1QxVEl0RzUyRG1RdVVaT1NkZHE5eTFuZXJLcmNzS3ZpWHNTVUVGZVo1UXBUTmpqdnpFWHJOWnBwNApXQ2tpQmtFeUkxRWYxc2J6a0hIYnMvbXZDWHJCbDcraXlMZXUrek5uZVB0M2JLOHJlcG89Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
kind: Secret
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: hubble-ca-secret
  namespace: kube-system
---
apiVersion: v1
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRQ0EwVmVRUk5FZEdDd09CeDI0cHpnVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak13TkRJd01UUXhPVE01V2hjTk1qWXdOREU1TVRReApPVE01V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQzZZbGRybTZqOEp6ZEtRS3NHOC9YaTR3VGFqTE1JMHhtajBvV3YyaGkxbmNTc2ErdGUKbS9qSTVvYkZ1RnY2VWVDVTkyS3UxbkdHci9KZ3kya1pUMWpiNjgwWDhJSVh5MExBUWdPMkY5SnZaZVFnQWNGQwpWUENMWnpKR01ETGgwYThScjQzeUkzM1Q3TDFQUllsWFBFY2tRL1RqTzg4Y0RMd1lzSUd4QitpbjlWRmswQmZPCnZnZzQ3YmI4UFlDTi9nY2dIK2VBVlNmZnp3QStwVUI3U2JWQmxkUjRuUE1UWlYrRW9YQWhzNHNVT29hNzFlNncKS0doSkRadlkvcDg5azVxb3hXbEliTU1TZkVwNmtLUFRiWUpma0Q1SUVkNDloU2RJWDNsY0NKMXVrSHVXM080RQpEcTRaU3p4UldnNGVIUGlGYXV0Y08xRXlMYmVMaUllZlpGSEhBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVETWFXVXZtTXczb0gwQnhFSVZuclVURWJybGt3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFKMFpYOHozNjlWSW9aN2FFd0lIN3hJSTdoZ3BUa29mR2V0Vy9hTkNqWldXSnF5V05wRjlmSldQCkcvWkEwL2lqTG1ka3NYdGNTZ2c0TEp5RXU1TFdORE1MUm9GRUJNWS9UQzF1Tng3VnhoRWJLY3VaLy9SbGpKMU0KK1VqU2NBSm9DbkJ3d2RSZlU3TTBmOUxRMG9yUUx2U1FkamJCRlNubE50c3ZpZnBMek44VlcrQjdJTFJnTThvcQpCZm15ZFJ5alErblcrWXJQaUpHYTZId3RRdEFyeUNGR2p2eWdPRnZaNStrRUFYSGwwYnF2c01qcUtHOXdQOVd6CnB0TmQ3Zkg2SDl3TUsxc2NTY29jaERwek9EQ1NGNStBN1F0VGx5aUVwdVFyRkhhMU9VREQwdjEwbFlTd0FheHcKSXNJSTV6azFkSlhZWkQrOFR4TU9zTEdZcVByRjNTaz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTVENDQWpHZ0F3SUJBZ0lSQU1mcWwvb2l4aHZFYlRvVWo1QW4yRVV3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEl6TURReU1ERTBNVGt6T1ZvWERUSTJNRFF4T1RFMApNVGt6T1Zvd0l6RWhNQjhHQTFVRUF3d1lLaTVvZFdKaWJHVXRjbVZzWVhrdVkybHNhWFZ0TG1sdk1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXlyQzhmR2pER0YrY1FBckw2T2JNWk1tRHlUdWUKaW5HSTBYSzNmTmo3YU9tUkhhZlV2ZkVYaDlIaCtOVXprZ0tXa2dwa3RTZWt5ZGhyY0pXSjR6SXlreHVVME1odQpwMkhJdWpiWXdlM1FsWG91S2FCcUwxSWpjMU0xZlh6dWpHUm5XSWpLVzVTZ0NvRXp2c0FZeERtQllBQ0o5VzZSClFIUU0zNFVIMlFhMTE2azlpVDlEKzlSMTRSUGFxeVhGWWt6bFVDRDVwczUxZGpqNXNZMHl4ZEx5MUorUnF4YW0KMVJkY3kxWWNPVnBXYzNHd2NVRmZpUkR5UmgyUllaN3l6aC85eDVtTFB2azJLc1RXYjFnZ0NZR2RQVTYvK05yTQpYSEFGQm85blpEUmNyaGFjeUpMR0VWdnBXeWs1UlJZY1ZNRmZuK0p4ZjBEdkZGbTN2SU9ET3pLUHNRSURBUUFCCm80R0dNSUdETUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUIKQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCUU14cFpTK1l6RGVnZlFIRVFoV2V0UgpNUnV1V1RBakJnTlZIUkVFSERBYWdoZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d0RRWUpLb1pJCmh2Y05BUUVMQlFBRGdnRUJBRzZPa0g4Zy9JT2RqUEJkRnNHUXlIRXpTQkg1TDA4TytmZktKRTc0QndkK3ladGIKMEdaZkwvaFhFSDJ6Tk5tb3dENUZCZkIrRDRNbXI3TWNSK29uRTFlekhhdWlCaDlCN2lUdm5uTUxEeW5hOEd3NQpzSmdLWDJVVVZia2FzS0lkSVdxcm50dWtmQmk4TEdiY1lBYk1Sajc2SU9XRVc4UlNQcCtuVC9SMXFJUGxJM3ZjCmtleG5ubWFLZFkvMzJtQklGOEgzRDdtanhlcFgvMGNHSjdKMzFYNkdidDlweHVZNGRQZEt4Vi9ZZmpKVHJnVVQKRVZWZm5SSXNWUmVkYjVHTHBuUlhCdExtenc0Z0loNUxlbTA0OFpCTElqQityODYvVXM4bmF6Ymc5dE1TdnI2Mgp5MThyRGJRR1pwb2xLRHM5NHRCRDB3STBlZ2R3TjlsWjVrRjZhbVE9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBeXJDOGZHakRHRitjUUFyTDZPYk1aTW1EeVR1ZWluR0kwWEszZk5qN2FPbVJIYWZVCnZmRVhoOUhoK05VemtnS1drZ3BrdFNla3lkaHJjSldKNHpJeWt4dVUwTWh1cDJISXVqYll3ZTNRbFhvdUthQnEKTDFJamMxTTFmWHp1akdSbldJaktXNVNnQ29FenZzQVl4RG1CWUFDSjlXNlJRSFFNMzRVSDJRYTExNms5aVQ5RAorOVIxNFJQYXF5WEZZa3psVUNENXBzNTFkamo1c1kweXhkTHkxSitScXhhbTFSZGN5MVljT1ZwV2MzR3djVUZmCmlSRHlSaDJSWVo3eXpoLzl4NW1MUHZrMktzVFdiMWdnQ1lHZFBVNi8rTnJNWEhBRkJvOW5aRFJjcmhhY3lKTEcKRVZ2cFd5azVSUlljVk1GZm4rSnhmMER2RkZtM3ZJT0RPektQc1FJREFRQUJBb0lCQUNmbkgxUkdzNUhLME5IeQp6aTN0c2ZOdGtKby9PSGo4M1BpTzR2eWJJdk9HZCtFa3QwY2xmWUpwbVZrSmIvdWdzcy9SWi80WjdlRW0wQS84CkFJZFB6SkVWYnZpalhOVnE5TDlrS013VTYybGlBbENEbWlQeXdiUGtmN1ZTc1F2R2dHbjNsQTd2ZFlwYjRUbisKUzJIbUNFaEVFdVRVZlpmNHdNZ0lRb0ZCUnU5THNuV0Q1aDl4QzlJK1l5UjNYcmZpOHg3OGd5TENVamhXdnFaYwpFdlRMQndwWGZmUGZRY3hGMmhqOXF5WWZrcXN1d2h2eHNFOTdEYlkwL1ZuSGdyV0l4dkxHWk5pSUZ2SWdua1BDCnYvQ2tYc0IySncvcWE4SkI3SWRCdzJ4YVVrWGRWM0E4UzJmTy81cHo2TldNczlVb2YrQ3gyczZHazc3MmhLRFUKVnVad0M0RUNnWUVBNW1jTVp4VEhra1puOXNURjVxdWhmK3B5VWUwenpNVHlZLzZTcWpkUzlSdDRGdlFPMm9YdApWM3ZldUZyQlQxMlpTN2t4ZFpEOXRnSjdXcXdRd2hqRWJPamplVTIyVUtZd253VXlNNFZobXJsb0JJdnY0eDI5CnBySHB2Q3pKM2o0NUYzd2lWVkhrYkp6QmpQTzR3WnJFRjRmcDhJVXFUZVdHbFFHQnhzL2hxR2tDZ1lFQTRUV0UKZitXWk9idG9DdzBFTFUxYStnM0tPNlFSRGs4ODE3WUZHbFp0VjlGajg1cTJRU1hINmtUZ0hPRWZpam1tdzFuUgpOV0o2M2FJUkxhVmpGWUVhdG9ucmlCb3lSNGhSWVpkSnc2ZGwwMXE3TlY5USsvWlI0Yk0vV2I1T1lxZVd4MExyCm9EOVI0UFRJQ2hudmhhQ2Y5dXFvTzhMSURPVFBMT2NKWEZSU0JBa0NnWUVBemNXczR3ZEE4aGZsVkJRTGQyZEQKdG4ySm1qZlI4b2pXdm8ybktWUjl4NkMvMFNncGQrcnl2UlpKSkxjUlBMT29iR082azNocHp6dEtOZ0hFZWNVcQo4T1hSK3cxM3pYR1ByUVl6L3FXYU5WaHZXTmd0NTlZeEFnYVZiTlZIZVRCelJ0RTd6SjExOTdiTWVmbFZ3YnRhCmRIV1RicGRQNEFBbEFVRTJTWHh4MmprQ2dZQUo2RFBLK0l1MENYVjdQdmhYRWRjVnR2T1ZpaE1pQVFSWkxPMnUKaWV6SGR6T2hiTVhsdWNiQW5JVUxZQy9tQWNFL1NMMDJUdjIrc0RsM081WlBSTjJxK0FnL2RYK092QVZ3ZUpwTApIQnNUb0NNcUp1WkdIMERjMytqQ2h1ZWwyVjk5cG9qOUJLd1NiRkk4ZDRXYzZFTUJOck50NVpTdFZJZDBuemsvCk1ZcG1HUUtCZ1FEZFdqamVtSE4rTTgxL0t4UktKMDFsTWVSRWlNUjZXNHBtck13NWZpUXh3b0dIa0Q0Uk91R0cKd1VFSjMxSXdsNWtrOHR1aEFiaWlFdEJqdlR4ZFhqMytoSTNUcUYveHBvNEw0TU4rQVFyMDRXVzN4UFYram4zcAp1S1RSUkRXT0pWOFhlUEw3WGp3R1A0ZFBSdVAyMmtObWVWZ1hLL2FNTlZRTmp2aloxU293OUE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
kind: Secret
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
---
apiVersion: v1
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURFekNDQWZ1Z0F3SUJBZ0lRQ0EwVmVRUk5FZEdDd09CeDI0cHpnVEFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak13TkRJd01UUXhPVE01V2hjTk1qWXdOREU1TVRReApPVE01V2pBVU1SSXdFQVlEVlFRREV3bERhV3hwZFcwZ1EwRXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCCkR3QXdnZ0VLQW9JQkFRQzZZbGRybTZqOEp6ZEtRS3NHOC9YaTR3VGFqTE1JMHhtajBvV3YyaGkxbmNTc2ErdGUKbS9qSTVvYkZ1RnY2VWVDVTkyS3UxbkdHci9KZ3kya1pUMWpiNjgwWDhJSVh5MExBUWdPMkY5SnZaZVFnQWNGQwpWUENMWnpKR01ETGgwYThScjQzeUkzM1Q3TDFQUllsWFBFY2tRL1RqTzg4Y0RMd1lzSUd4QitpbjlWRmswQmZPCnZnZzQ3YmI4UFlDTi9nY2dIK2VBVlNmZnp3QStwVUI3U2JWQmxkUjRuUE1UWlYrRW9YQWhzNHNVT29hNzFlNncKS0doSkRadlkvcDg5azVxb3hXbEliTU1TZkVwNmtLUFRiWUpma0Q1SUVkNDloU2RJWDNsY0NKMXVrSHVXM080RQpEcTRaU3p4UldnNGVIUGlGYXV0Y08xRXlMYmVMaUllZlpGSEhBZ01CQUFHallUQmZNQTRHQTFVZER3RUIvd1FFCkF3SUNwREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0R3WURWUjBUQVFIL0JBVXcKQXdFQi96QWRCZ05WSFE0RUZnUVVETWFXVXZtTXczb0gwQnhFSVZuclVURWJybGt3RFFZSktvWklodmNOQVFFTApCUUFEZ2dFQkFKMFpYOHozNjlWSW9aN2FFd0lIN3hJSTdoZ3BUa29mR2V0Vy9hTkNqWldXSnF5V05wRjlmSldQCkcvWkEwL2lqTG1ka3NYdGNTZ2c0TEp5RXU1TFdORE1MUm9GRUJNWS9UQzF1Tng3VnhoRWJLY3VaLy9SbGpKMU0KK1VqU2NBSm9DbkJ3d2RSZlU3TTBmOUxRMG9yUUx2U1FkamJCRlNubE50c3ZpZnBMek44VlcrQjdJTFJnTThvcQpCZm15ZFJ5alErblcrWXJQaUpHYTZId3RRdEFyeUNGR2p2eWdPRnZaNStrRUFYSGwwYnF2c01qcUtHOXdQOVd6CnB0TmQ3Zkg2SDl3TUsxc2NTY29jaERwek9EQ1NGNStBN1F0VGx5aUVwdVFyRkhhMU9VREQwdjEwbFlTd0FheHcKSXNJSTV6azFkSlhZWkQrOFR4TU9zTEdZcVByRjNTaz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURZakNDQWtxZ0F3SUJBZ0lRY1pBNHRpQzUxUUVIK2psZUovbG00ekFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05Nak13TkRJd01UUXhPVE01V2hjTk1qWXdOREU1TVRReApPVE01V2pBd01TNHdMQVlEVlFRRERDVXFMblJoYkc5ekxXUmxabUYxYkhRdWFIVmlZbXhsTFdkeWNHTXVZMmxzCmFYVnRMbWx2TUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUEwK0Zyald6RjVCQUwKalNBMTJha1hZeFNqaDR0K2FLcFNYQkp0Vk4yNk5IVWdSeXdvb3dqTXFxZVR6SXdvbzBPaUg0cEdmbnZXRThQRgozbkJhcGUwOW5XdmpSSnNhUGxnNDV6MVNtRzdiY3Q2dnlaWkxOMW5NZlFoSHl6aXZVSWZ1N0Z2blgwR2FWN0NsCmhieGFoY1FFZHpVZ1pPeWUySjJYL2VKYTdEN1VGenhLdHd5SGdDQ1YvK3dGNi9uU1EySXArTTNhY1lGam1xRmoKbjYwdHphVDN0YVNaS1h4azdBa3NqT1FuRExPV2pSMU52NExidnVmN0VkanNkNjhzT2dGVGdoZVRYeU9lYnV5aAorUXkwbmpQTUxWWVBNckxjcjFMd3VGVExUNXc4SmxqQm40a21QOWp3NXZtdE5ZcitoM1hpWFN1eE9md0VFbGRECjZxbTBoQzJpQ1FJREFRQUJvNEdUTUlHUU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3IKQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWZCZ05WSFNNRUdEQVdnQlFNeHBaUworWXpEZWdmUUhFUWhXZXRSTVJ1dVdUQXdCZ05WSFJFRUtUQW5naVVxTG5SaGJHOXpMV1JsWm1GMWJIUXVhSFZpCllteGxMV2R5Y0dNdVkybHNhWFZ0TG1sdk1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQ25zdjYxQ3hFZWk3YnEKK01VRGt3aWRISXBYUjBkTEhNRHdRMlVrbE0rbkNQYmNIaDRtN1dsaVVkdXE0VzF5UVFKK2RRaEtRWUpCK3R1Swo1NDdJNnpKM3l0dTJCSGY0bm9BOHVoUGdFS3F5VFE5VXBod2JnQnhlY1lFbkdMVlFzdTZzMStqbHk5VW5ZSVhKCmVNYU1kdElMU2JJVVBSWVExVGVZWm9obGhZbk9PY0NzVkZOZU11VGVGRHhJU2JrUkMxZmdYYUJKQmRsaTF3UlIKc3VYd08rT0VCa09ka0d5T3plSVdSZzFYR0hxWlNBQSthWFp2TlBRYm9vL0YvYnFTOGNtZ2V6U0dpQVlwTGlqSApHNUFtdHRIeUp6WFdSbUdlUXZOcitYSlNKbHZFM0tsRnpacmt2c0oxU2JhT3Z2d2FHckVpYXFOTGRHYzY3aDFmCjhDVzdqMzdrCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBMCtGcmpXekY1QkFMalNBMTJha1hZeFNqaDR0K2FLcFNYQkp0Vk4yNk5IVWdSeXdvCm93ak1xcWVUekl3b28wT2lINHBHZm52V0U4UEYzbkJhcGUwOW5XdmpSSnNhUGxnNDV6MVNtRzdiY3Q2dnlaWkwKTjFuTWZRaEh5eml2VUlmdTdGdm5YMEdhVjdDbGhieGFoY1FFZHpVZ1pPeWUySjJYL2VKYTdEN1VGenhLdHd5SApnQ0NWLyt3RjYvblNRMklwK00zYWNZRmptcUZqbjYwdHphVDN0YVNaS1h4azdBa3NqT1FuRExPV2pSMU52NExiCnZ1ZjdFZGpzZDY4c09nRlRnaGVUWHlPZWJ1eWgrUXkwbmpQTUxWWVBNckxjcjFMd3VGVExUNXc4SmxqQm40a20KUDlqdzV2bXROWXIraDNYaVhTdXhPZndFRWxkRDZxbTBoQzJpQ1FJREFRQUJBb0lCQUFPNG5zbnlFaHVxU0htbgpDaXNUZEN5eVRSanhVendGV2NMeU0rZGNxWXVJVHhQUTY3bkpTc2JvZ0lrRUlTYVU1b0VGVGEybEFTS0J1clRvClpqOHB4bjVBU2RLSG90TmJlMHhjWUZuN0FIR3BCWTlWeTJaaWRsdnZ6RXIrYU4zU05Wa0RXREh0RmdmYU8xMzQKNitJVGlqeUp1MUxxY1BPKytNOWxyVkVlM1Z5M0V5eVNmTUxob3c1dERjdXE3RG83ZGcrWngzaHFxTnhTbitOVgpoKzk3bXhoUkl3SXMrS0F2eGxYTWREV2V2Z2dTNVFKdUJGSlVYQWRmL1hZYWZLV2xQVkk2Y3krVjZuUGNpTTRBCjRtZW5ZUkhLVDJDT21TUCtjWGZ0czVOMkRYUS9ZK1JZNk1YLzNjVUgyMEVRUDZhSTFGRTIxaWs1UWdKQWpmSk0KbnN3aVYyMENnWUVBM3VXNGdwT1ZiZTlvNldxY2lJcngxSkpoWGp3N2l4UGxhcFZSTDRJTnJzZlhDYlptaXZ4SAo5eDRmTXU4UjdwVFNOOHYyb3FKWFY3d2x5bWFBN3gxUTZGQnhhSXkwRXRXZGFOSVJWNlZpd01WdDhWeGpxVEdCClRsZHhkNmxyYjQzckZ1NjlBYkhSNnk1S2lZWmJpWEFzd09pN040QnpPZGR5cXhLWk80cmVDYThDZ1lFQTgxamEKdW80bW8zMnhpLzlRYVVUYUkxZkhxTjY1Y0ttTHFXekx6dXJ4UEF2SENiVmVvQkxPcVBZTGRSbWpnMC93L1REdApza0E0N1R4WEZ1endQWWNIWS9qNzdXMXZ3bHpRdmtKb2VtNzNsWHp6cFJoZlNFUk9Ubkg1NXFFb1hjUU9jU1M0ClVpdVQzTkhtZFJzcTJhdkFtY1dXTTk5NVpFQWJDMnVmUGQyelZjY0NnWUVBMG1sMDFmN1BydW16MWJTSWMvVUYKK0s3K0wyRVlyRjlwMEVXSVVCcXJJL1VPTCtMNXhmWUZVV2dqOTRickhKZHNJclB0N1BUbkVyRlAwMU1VSDZWQwovU3NEQTdqZlBIQmVtZGJEL0VMcGlDUlhkdUxLU2F1cjd2Sm84SmNFRGxpZ05oUEVaRmNpWEtwa1BwS1EwcHNNCkJFY3VoR1JEWWJUYVVGZk1Rd01DTzQwQ2dZRUF2MCswcmdQQmhyanprMitHaFN3WEhzQU0vTXNWR09pQ0h4R2sKYlNreHZCWTZSWHlzUnNaaWFGei9CdkhBSmlUNy9lR3dqWG1HQjZSdmgxdUJSNjNYZHBZeFlTaXZPeXVEQklEcQo2STVDNE9oYUdBcEFKbTFrN3JFV1dXV0xlYVFBQXAxdXQxTUJMUkpyenRjcjZmTG9PVHdvYU9HZzZ0cW5LR1JVCnpldDA2Tk1DZ1lFQWdnbEVRcS9uNFk2MGkwODdHOHpQT3NTdldxb1JWQ1FPQzY3VzBpcGV2OHZvbVl0eVROczcKc1BwTFpvUzJVM0tNMFhRaDR6Qm1BTTdtQXBSc2RsNE52SVI5TWY0U2wrb3NOMjJrMUN5NTJuUGJXZHBoZ3QxUwpqd3d6WDdoYS9WTUpnU01ObEVWOUVoaForWUVKNjZIcTVoODNWSXljUXNVelhjTWc5eWk0d1ZFPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
kind: Secret
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
---
apiVersion: v1
kind: Endpoints
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: cilium-ingress
  namespace: kube-system
subsets:
- addresses:
  - ip: 192.192.192.192
  ports:
  - port: 9999
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
    prometheus.io/port: "9964"
    prometheus.io/scrape: "true"
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cilium-agent
    app.kubernetes.io/part-of: cilium
    k8s-app: cilium
  name: cilium-agent
  namespace: kube-system
spec:
  clusterIP: None
  ports:
  - name: envoy-metrics
    port: 9964
    protocol: TCP
    targetPort: envoy-metrics
  selector:
    k8s-app: cilium
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    cilium.io/ingress: "true"
  name: cilium-ingress
  namespace: kube-system
spec:
  ports:
  - name: http
    nodePort: null
    port: 80
    protocol: TCP
  - name: https
    nodePort: null
    port: 443
    protocol: TCP
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
    prometheus.io/port: "9965"
    prometheus.io/scrape: "true"
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: hubble
    app.kubernetes.io/part-of: cilium
    k8s-app: hubble
  name: hubble-metrics
  namespace: kube-system
spec:
  clusterIP: None
  ports:
  - name: hubble-metrics
    port: 9965
    protocol: TCP
    targetPort: hubble-metrics
  selector:
    k8s-app: cilium
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: hubble-peer
    app.kubernetes.io/part-of: cilium
    k8s-app: cilium
  name: hubble-peer
  namespace: kube-system
spec:
  internalTrafficPolicy: Local
  ports:
  - name: peer-service
    port: 443
    protocol: TCP
    targetPort: 4244
  selector:
    k8s-app: cilium
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
    k8s-app: hubble-relay
  name: hubble-relay
  namespace: kube-system
spec:
  ports:
  - port: 80
    protocol: TCP
    targetPort: 4245
  selector:
    k8s-app: hubble-relay
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    k8s-app: hubble-relay
  name: hubble-relay-metrics
  namespace: kube-system
spec:
  clusterIP: None
  ports:
  - name: metrics
    port: 9966
    protocol: TCP
    targetPort: prometheus
  selector:
    k8s-app: hubble-relay
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
    k8s-app: hubble-ui
  name: hubble-ui
  namespace: kube-system
spec:
  ports:
  - name: http
    port: 80
    targetPort: 8081
  selector:
    k8s-app: hubble-ui
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cilium-operator
    app.kubernetes.io/part-of: cilium
    io.cilium/app: operator
    name: cilium-operator
  name: cilium-operator
  namespace: kube-system
spec:
  replicas: 2
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        cilium.io/cilium-configmap-checksum: ff7c538d8168a698528279ff3d0ea348a55957da2f955f27b195274bf43153b5
        prometheus.io/port: "9963"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: cilium-operator
        app.kubernetes.io/part-of: cilium
        io.cilium/app: operator
        name: cilium-operator
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                io.cilium/app: operator
            topologyKey: kubernetes.io/hostname
      automountServiceAccountToken: true
      containers:
      - args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        command:
        - cilium-operator-generic
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        - name: KUBERNETES_SERVICE_HOST
          value: 192.168.50.200
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        image: quay.io/cilium/operator-generic:v1.13.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            host: 127.0.0.1
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        name: cilium-operator
        ports:
        - containerPort: 9963
          hostPort: 9963
          name: prometheus
          protocol: TCP
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /tmp/cilium/config-map
          name: cilium-config-path
          readOnly: true
      hostNetwork: true
      nodeSelector:
        kubernetes.io/os: linux
      priorityClassName: system-node-critical
      restartPolicy: Always
      serviceAccount: cilium-operator
      serviceAccountName: cilium-operator
      tolerations:
      - operator: Exists
      volumes:
      - configMap:
          name: cilium-config
        name: cilium-config-path
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
    k8s-app: hubble-relay
  name: hubble-relay
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        cilium.io/hubble-relay-configmap-checksum: 27301b70a92d3247904e1723ebd50d3d674bd6de3c49138f56111eb8d0161208
      labels:
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
        k8s-app: hubble-relay
    spec:
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      automountServiceAccountToken: false
      containers:
      - args:
        - serve
        command:
        - hubble-relay
        image: quay.io/cilium/hubble-relay:v1.13.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          tcpSocket:
            port: grpc
        name: hubble-relay
        ports:
        - containerPort: 4245
          name: grpc
        - containerPort: 9966
          name: prometheus
          protocol: TCP
        readinessProbe:
          tcpSocket:
            port: grpc
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /etc/hubble-relay
          name: config
          readOnly: true
        - mountPath: /var/lib/hubble-relay/tls
          name: tls
          readOnly: true
      nodeSelector:
        kubernetes.io/os: linux
      priorityClassName: system-node-critical
      restartPolicy: Always
      serviceAccount: hubble-relay
      serviceAccountName: hubble-relay
      terminationGracePeriodSeconds: 1
      volumes:
      - configMap:
          items:
          - key: config.yaml
            path: config.yaml
          name: hubble-relay-config
        name: config
      - name: tls
        projected:
          defaultMode: 256
          sources:
          - secret:
              items:
              - key: ca.crt
                path: hubble-server-ca.crt
              - key: tls.crt
                path: client.crt
              - key: tls.key
                path: client.key
              name: hubble-relay-client-certs
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
    k8s-app: hubble-ui
  name: hubble-ui
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        cilium.io/hubble-ui-nginx-configmap-checksum: 02d6b04b131029fae39270192dcff10fa3a64af9d1d4d0049f1efbc3f5526a34
      labels:
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
        k8s-app: hubble-ui
    spec:
      automountServiceAccountToken: true
      containers:
      - image: quay.io/cilium/hubble-ui:v0.11.0@sha256:bcb369c47cada2d4257d63d3749f7f87c91dde32e010b223597306de95d1ecc8
        imagePullPolicy: IfNotPresent
        name: frontend
        ports:
        - containerPort: 8081
          name: http
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /etc/nginx/conf.d/default.conf
          name: hubble-ui-nginx-conf
          subPath: nginx.conf
        - mountPath: /tmp
          name: tmp-dir
      - env:
        - name: EVENTS_SERVER_PORT
          value: "8090"
        - name: FLOWS_API_ADDR
          value: hubble-relay:80
        image: quay.io/cilium/hubble-ui-backend:v0.11.0@sha256:14c04d11f78da5c363f88592abae8d2ecee3cbe009f443ef11df6ac5f692d839
        imagePullPolicy: IfNotPresent
        name: backend
        ports:
        - containerPort: 8090
          name: grpc
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts: null
      nodeSelector:
        kubernetes.io/os: linux
      priorityClassName: system-node-critical
      securityContext:
        fsGroup: 1001
        runAsGroup: 1001
        runAsUser: 1001
      serviceAccount: hubble-ui
      serviceAccountName: hubble-ui
      volumes:
      - configMap:
          defaultMode: 420
          name: hubble-ui-nginx
        name: hubble-ui-nginx-conf
      - emptyDir: {}
        name: tmp-dir
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: cilium-agent
    app.kubernetes.io/part-of: cilium
    k8s-app: cilium
  name: cilium
  namespace: kube-system
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  template:
    metadata:
      annotations:
        container.apparmor.security.beta.kubernetes.io/cilium-agent: unconfined
        container.apparmor.security.beta.kubernetes.io/clean-cilium-state: unconfined
        prometheus.io/port: "9962"
        prometheus.io/scrape: "true"
      labels:
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
        k8s-app: cilium
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                k8s-app: cilium
            topologyKey: kubernetes.io/hostname
      automountServiceAccountToken: true
      containers:
      - args:
        - --config-dir=/tmp/cilium/config-map
        command:
        - cilium-agent
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        - name: CILIUM_CNI_CHAINING_MODE
          valueFrom:
            configMapKeyRef:
              key: cni-chaining-mode
              name: cilium-config
              optional: true
        - name: CILIUM_CUSTOM_CNI_CONF
          valueFrom:
            configMapKeyRef:
              key: custom-cni-conf
              name: cilium-config
              optional: true
        - name: KUBERNETES_SERVICE_HOST
          value: 192.168.50.200
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        image: quay.io/cilium/cilium:v1.13.2
        imagePullPolicy: IfNotPresent
        lifecycle:
          postStart:
            exec:
              command:
              - bash
              - -c
              - |
                /cni-install.sh --enable-debug=false --cni-exclusive=true --log-file=/var/run/cilium/cilium-cni.log
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        livenessProbe:
          failureThreshold: 10
          httpGet:
            host: 127.0.0.1
            httpHeaders:
            - name: brief
              value: "true"
            path: /healthz
            port: 9879
            scheme: HTTP
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        name: cilium-agent
        ports:
        - containerPort: 4244
          hostPort: 4244
          name: peer-service
          protocol: TCP
        - containerPort: 9962
          hostPort: 9962
          name: prometheus
          protocol: TCP
        - containerPort: 9964
          hostPort: 9964
          name: envoy-metrics
          protocol: TCP
        - containerPort: 9965
          hostPort: 9965
          name: hubble-metrics
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            host: 127.0.0.1
            httpHeaders:
            - name: brief
              value: "true"
            path: /healthz
            port: 9879
            scheme: HTTP
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        securityContext:
          capabilities:
            add:
            - CHOWN
            - KILL
            - NET_ADMIN
            - NET_RAW
            - IPC_LOCK
            - SYS_ADMIN
            - SYS_RESOURCE
            - DAC_OVERRIDE
            - FOWNER
            - SETGID
            - SETUID
            drop:
            - ALL
          seLinuxOptions:
            level: s0
            type: spc_t
        startupProbe:
          failureThreshold: 105
          httpGet:
            host: 127.0.0.1
            httpHeaders:
            - name: brief
              value: "true"
            path: /healthz
            port: 9879
            scheme: HTTP
          periodSeconds: 2
          successThreshold: 1
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /host/proc/sys/net
          name: host-proc-sys-net
        - mountPath: /host/proc/sys/kernel
          name: host-proc-sys-kernel
        - mountPath: /sys/fs/bpf
          mountPropagation: HostToContainer
          name: bpf-maps
        - mountPath: /sys/fs/cgroup
          name: cilium-cgroup
        - mountPath: /var/run/cilium
          name: cilium-run
        - mountPath: /host/etc/cni/net.d
          name: etc-cni-netd
        - mountPath: /var/lib/cilium/clustermesh
          name: clustermesh-secrets
          readOnly: true
        - mountPath: /lib/modules
          name: lib-modules
          readOnly: true
        - mountPath: /run/xtables.lock
          name: xtables-lock
        - mountPath: /var/lib/cilium/tls/hubble
          name: hubble-tls
          readOnly: true
        - mountPath: /tmp
          name: tmp
      hostNetwork: true
      initContainers:
      - command:
        - cilium
        - build-config
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: KUBERNETES_SERVICE_HOST
          value: 192.168.50.200
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        image: quay.io/cilium/cilium:v1.13.2
        imagePullPolicy: IfNotPresent
        name: config
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /tmp
          name: tmp
      - args:
        - mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf
        command:
        - /bin/bash
        - -c
        - --
        image: quay.io/cilium/cilium:v1.13.2
        imagePullPolicy: IfNotPresent
        name: mount-bpf-fs
        securityContext:
          privileged: true
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /sys/fs/bpf
          mountPropagation: Bidirectional
          name: bpf-maps
      - command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              key: clean-cilium-state
              name: cilium-config
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              key: clean-cilium-bpf-state
              name: cilium-config
              optional: true
        - name: KUBERNETES_SERVICE_HOST
          value: 192.168.50.200
        - name: KUBERNETES_SERVICE_PORT
          value: "6443"
        image: quay.io/cilium/cilium:v1.13.2
        imagePullPolicy: IfNotPresent
        name: clean-cilium-state
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
            - SYS_ADMIN
            - SYS_RESOURCE
            drop:
            - ALL
          seLinuxOptions:
            level: s0
            type: spc_t
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /sys/fs/bpf
          name: bpf-maps
        - mountPath: /sys/fs/cgroup
          mountPropagation: HostToContainer
          name: cilium-cgroup
        - mountPath: /var/run/cilium
          name: cilium-run
      - command:
        - /install-plugin.sh
        image: quay.io/cilium/cilium:v1.13.2
        imagePullPolicy: IfNotPresent
        name: install-cni-binaries
        resources:
          requests:
            cpu: 100m
            memory: 10Mi
        securityContext:
          capabilities:
            drop:
            - ALL
          seLinuxOptions:
            level: s0
            type: spc_t
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /host/opt/cni/bin
          name: cni-path
      nodeSelector:
        kubernetes.io/os: linux
      priorityClassName: system-node-critical
      restartPolicy: Always
      serviceAccount: cilium
      serviceAccountName: cilium
      terminationGracePeriodSeconds: 1
      tolerations:
      - operator: Exists
      volumes:
      - emptyDir: {}
        name: tmp
      - hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        name: cilium-run
      - hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
        name: bpf-maps
      - hostPath:
          path: /sys/fs/cgroup
          type: DirectoryOrCreate
        name: cilium-cgroup
      - hostPath:
          path: /opt/cni/bin
          type: DirectoryOrCreate
        name: cni-path
      - hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        name: etc-cni-netd
      - hostPath:
          path: /lib/modules
        name: lib-modules
      - hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        name: xtables-lock
      - name: clustermesh-secrets
        secret:
          defaultMode: 256
          optional: true
          secretName: cilium-clustermesh
      - hostPath:
          path: /proc/sys/net
          type: Directory
        name: host-proc-sys-net
      - hostPath:
          path: /proc/sys/kernel
          type: Directory
        name: host-proc-sys-kernel
      - name: hubble-tls
        projected:
          defaultMode: 256
          sources:
          - secret:
              items:
              - key: ca.crt
                path: client-ca.crt
              - key: tls.crt
                path: server.crt
              - key: tls.key
                path: server.key
              name: hubble-server-certs
              optional: true
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
---
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  annotations:
    meta.helm.sh/release-name: cilium
    meta.helm.sh/release-namespace: kube-system
  labels:
    app.kubernetes.io/managed-by: Helm
  name: cilium
spec:
  controller: cilium.io/ingress-controller
