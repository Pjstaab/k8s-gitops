apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: example
  labels:
    # An optional convention is to include a label of the XRD. This allows
    # easy discovery of compatible Compositions.
    crossplane.io/xrd: xgkeclusters.clusters.gcp.xunholy.io
    # The following label marks this Composition for GCP. This label can
    # be used in 'compositionSelector' in an XR or Claim.
    provider: gcp
spec:
  # When an XR is created in response to a claim Crossplane needs to know where
  # it should create the XR's connection secret. This is configured using the
  # 'writeConnectionSecretsToNamespace' field.
  writeConnectionSecretsToNamespace: crossplane-system
  # Each Composition must declare that it is compatible with a particular type
  # of Composite Resource using its 'compositeTypeRef' field. The referenced
  # version must be marked 'referenceable' in the XRD that defines the XR.
  compositeTypeRef:
    apiVersion: clusters.gcp.xunholy.io/v1alpha1
    kind: XGKECluster
  # Each Composition must specify at least one composed resource template.
  resources:
    - name: cluster
      # The 'base' template for the Cluster Crossplane will create.
      # You can use the base template to specify fields that never change, or
      # default values for fields that may optionally be patched over. Bases must
      # be a valid Crossplane resource - a Managed Resource, Composite Resource,
      # or a ProviderConfig.
      base:
        apiVersion: container.gcp.upbound.io/v1beta1
        kind: Cluster
        spec:
          forProvider:
            # TODO: Set an initial GKE Auto Pilot version explicitly
            # initialClusterVersion:
            releaseChannel:
              channel: RAPID
            maintenancePolicy:
              window:
                recurringWindow:
                  # make the window encompass every weekend from midnight Saturday till the last minute of Sunday UTC:
                  recurrence: "start time = 2019-01-05T00:00:00Z end time = 2019-01-07T23:59:00Z recurrence = FREQ=WEEKLY;BYDAY=SA"
            location: us-central1
            # https://cloud.google.com/kubernetes-engine/docs/concepts/autopilot-overview
            enableAutopilot: true
            # https://cloud.google.com/kubernetes-engine/docs/how-to/confidential-gke-nodes
            confidentialNodes:
              enabled: false
            enableBinaryAuthorization: true
            authenticatorGroupsConfig:
              securityGroup: gke-security-groups@raspbernetes.com
            addonsConfig:
              configConnectorConfig:
                enabled: true
            # Possible values: "DATAPATH_PROVIDER_UNSPECIFIED", "LEGACY_DATAPATH", "ADVANCED_DATAPATH" - Default value. "LEGACY_DATAPATH"
            # https://cloud.google.com/kubernetes-engine/docs/how-to/dataplane-v2
            datapathProvider: ADVANCED_DATAPATH
            networkPolicy:
              # TODO: Does this only enable Calico network policies? If so that is useless.
              enabled: true
          writeConnectionSecretToRef:
            namespace: crossplane-system


apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: xclusters.gcp.xunholy.io
  labels:
    provider: gcp
spec:
  writeConnectionSecretsToNamespace: crossplane-system
  compositeTypeRef:
    apiVersion: cluster.xunholy.io/v1alpha1
    kind: XCluster
  resources:
    - name: autopilot
      base:
        apiVersion: container.gcp.upbound.io/v1beta1
        kind: Cluster
        spec:
          forProvider:

            releaseChannel:
              channel: RAPID
            location: us-central1
            enableAutopilot: true

            region: us-east-1
            dbInstanceClass: db.t2.small
            masterUsername: masteruser
            engine: postgres
            engineVersion: "12"
            skipFinalSnapshotBeforeDeletion: true
            publiclyAccessible: true
          writeConnectionSecretToRef:
            namespace: crossplane-system




      patches:
        - fromFieldPath: "metadata.uid"
          toFieldPath: "spec.writeConnectionSecretToRef.name"
          transforms:
            - type: string
              string:
                fmt: "%s-postgresql"
        - fromFieldPath: "spec.parameters.storageGB"
          toFieldPath: "spec.forProvider.allocatedStorage"
      connectionDetails:
        - fromConnectionSecretKey: username
        - fromConnectionSecretKey: password
        - fromConnectionSecretKey: endpoint
        - fromConnectionSecretKey: port
