name: Publish OCI artifact

on:
  workflow_dispatch: null
  push:
    branches:
      - main
    paths:
      # Trigger workflow if workflow file is updated to validate it works appropriately
      - .github/workflows/oci.yaml
      # Trigger workflow if commit contains changes to configuration stored in the OCI artifact
      - k8s/**

# Default GITHUB_TOKEN token permissions do NOT support cosign and must be enabled.
# This is to set the package and id_token permissions to read|write.
# Current default permissions can be viewed here: https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token
permissions: write-all

env:
  OCI_REPO: "oci://ghcr.io/xunholy/manifests/${{ github.event.repository.name }}"
  GHCR_REPO: "ghcr.io/xunholy/manifests/${{ github.event.repository.name }}"

jobs:
  publish:
    runs-on: ubuntu-latest
    env:
      COSIGN_EXPERIMENTAL: "true"
      COSIGN_YES: "true"
    steps:
      # Required to be able to create an OCI artifact
      - name: Checkout
        uses: actions/checkout@v3

      # Install FluxCD
      - name: Setup Flux CLI
        uses: fluxcd/flux2/action@main

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Create OCI artifact with kubernetes manifests
      - name: Create OCI artifact
        run: |
          flux push artifact $OCI_REPO:$(git rev-parse --short HEAD) \
            --path="./k8s" \
            --source="$(git config --get remote.origin.url)" \
            --revision="$(git branch --show-current)/$(git rev-parse HEAD)"

      # Tag OCI artifact
      - name: Create OCI artifact tag
        run: |
          flux tag artifact $OCI_REPO:$(git rev-parse --short HEAD) --tag main

      # Install Crane
      - uses: imjasonh/setup-crane@v0.3

      # Install Cosign
      - uses: sigstore/cosign-installer@main

      - name: Get the digest of the OCI artifact
        id: crane
        run: |
          DIGEST=$(crane digest $GHCR_REPO:$(git rev-parse --short HEAD))
          echo "DIGEST=$DIGEST" >> $GITHUB_OUTPUT

      # Cosign the OCI artifact
      - name: Sign the OCI artifact
        run: cosign sign $GHCR_REPO@${{ steps.crane.outputs.DIGEST }} -y

      # Verify the Cosign of the OCI artifact
      - name: Verify the pushed tags
        run: cosign verify $GHCR_REPO@${{ steps.crane.outputs.DIGEST }}
