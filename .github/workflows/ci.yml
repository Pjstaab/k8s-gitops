name: ci

on:
  pull_request:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Shellcheck
        uses: reviewdog/action-shellcheck@v1
        with:
          github_token: ${{ secrets.github_token }}
          reporter: github-pr-review
          path: '.'
          pattern: '*.sh'
          exclude: './.git/*'

      - name: Lint Yaml
        uses: ibiqlik/action-yamllint@v3
        with:
          config_file: .yamllint.yml

  compliance:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true

      - uses: izhangzhihao/delete-comment@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          delete_user_name:  github-actions[bot]
          issue_number: ${{ github.event.number }}

      - name: Execute Conftest Tests - Table Output
        id: conftest-table
        continue-on-error: true
        run: |
          result=$(docker run --rm --workdir /github/workspace \
            -v $(pwd):/github/workspace \
            instrumenta/conftest:v0.18.2 \
            test -o table -p security-policies/policies/ --all-namespaces --combine namespaces/ --no-color || exit 0)
          result="${result//'%'/'%25'}"
          result="${result//$'\n'/'%0A'}"
          result="${result//$'\r'/'%0D'}"
          echo $result
          echo "::set-output name=result::$result"

      - name: Execute Conftest Tests - Stdout Output
        id: conftest
        continue-on-error: true
        run: |
          result=$(docker run --rm --workdir /github/workspace \
            -v $(pwd):/github/workspace \
            instrumenta/conftest:v0.18.2 \
            test -o stdout -p security-policies/policies/ --all-namespaces namespaces/ --no-color || exit 0)
          result="${result//'%'/'%25'}"
          result="${result//$'\n'/'%0A'}"
          result="${result//$'\r'/'%0D'}"
          echo $result
          echo ::set-output name=result::$result

      - uses: actions/github-script@v4.1
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Kubernetes Conftest Validation ðŸ–Œ  \`${{ steps.conftest.outcome }}\`

            <details><summary>Show Kubernetes Conftest Report</summary>

            \`\`\`
            ${{ steps.conftest.outputs.result }}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`.\`, Workflow: \`${{ github.workflow }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  kubernetes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup tools
        uses: ./.github/actions/tools
      - name: Setup Flux
        uses: fluxcd/flux2/action@main
      - name: Setup Kubernetes
        uses: engineerd/setup-kind@v0.5.0
        with:
          version: "v0.11.1"
      - name: Install Flux in Kubernetes Kind
        run: flux install
      - name: Setup cluster reconciliation
        run: |
          flux create source git flux-system \
          --url=${{ github.event.repository.html_url }} \
          --branch=${GITHUB_REF#refs/heads/}
          flux create kustomization flux-system \
          --source=flux-system \
          --path=./k8s/clusters/production
      - name: Verify cluster reconciliation
        run: |
          kubectl -n flux-system wait kustomization/core --for=condition=ready --timeout=3m
          kubectl -n flux-system wait kustomization/namespaces --for=condition=ready --timeout=3m
      - name: Debug failure
        if: failure()
        run: |
          kubectl get kustomization -A
          kubectl get pods -A
          kubectl get deployments -A
          kubectl -n flux-system get all
          kubectl -n flux-system logs deploy/source-controller
          kubectl -n flux-system logs deploy/kustomize-controller
          kubectl -n flux-system logs deploy/helm-controller

  trivy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: 'trivy-results.sarif'
